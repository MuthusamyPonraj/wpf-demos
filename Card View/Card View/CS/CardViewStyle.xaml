<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:shared="clr-namespace:Syncfusion.Windows.Tools.Controls;assembly=Syncfusion.Shared.WPF" 
    xmlns:shared1="clr-namespace:Syncfusion.Windows.Shared;assembly=Syncfusion.Shared.Wpf"
    xmlns:sync="http://schemas.syncfusion.com/wpf" xmlns:vsm="clr-namespace:Syncfusion.Windows;assembly=Syncfusion.Shared.Wpf" >

    <!--ToggleButton-->
    
    <sync:SortDirectionToAngleConverter x:Key="AngleConverter"/>
    
    <sync:SortDirectionToVisibilityConverter x:Key="VisibilityConverter"/>

    <Style x:Key="ButtonFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <LinearGradientBrush x:Key="ButtonNormalBackground" EndPoint="0.5,1" StartPoint="0.5,0">
        <GradientStop Color="#FFCACAC9" Offset="0.582"/>
        <GradientStop Color="#FFB7B7B6" Offset="0.591"/>
        <GradientStop Color="#FFB1B1B0" Offset="0.984"/>
        <GradientStop Color="#FFD0D0D0" Offset="0.992"/>
    </LinearGradientBrush>

    <SolidColorBrush x:Key="ButtonNormalBorder" Color="#FFE2E2E2"/>
    <SolidColorBrush x:Key="ButtonForeground" Color="#FFFFFFFF"/>

    <LinearGradientBrush x:Key="ButtonHoverBackground" EndPoint="0.5,1" StartPoint="0.5,0">
        <GradientStop Color="#FFDADADA" Offset="0.1"/>
        <GradientStop Color="#FFD5D5D5" Offset="0.563"/>
        <GradientStop Color="#FFB7B7B6" Offset="0.575"/>
        <GradientStop Color="#FFB3B3B2" Offset="0.975"/>
        <GradientStop Color="#FFD0D0D0" Offset="0.987"/>
    </LinearGradientBrush>

    <Style TargetType="{x:Type ToggleButton}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}"/>
        <Setter Property="Background" Value="{StaticResource ButtonNormalBackground}"/>
        <Setter Property="BorderBrush" Value="{StaticResource ButtonNormalBorder}"/>
        <Setter Property="BorderThickness" Value="2.5"/>
        <Setter Property="Foreground" Value="{StaticResource ButtonForeground}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="Chrome" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true" CornerRadius="5">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition/>
                                <ColumnDefinition Width="20"/>
                            </Grid.ColumnDefinitions>
                            <ContentPresenter Grid.Column="0" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>

                            <Path Data="M0,0L3.5,4 7,0z" Grid.Column="1" HorizontalAlignment="Center" Height="5" Width="8" Stretch="Fill" Fill="White" Name="Arrow" VerticalAlignment="Center" RenderTransformOrigin="0.5,0.5">
                            </Path>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" Value="{StaticResource ButtonHoverBackground}"/>

                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="RenderTransform" TargetName="Arrow">
                                <Setter.Value>
                                    <RotateTransform Angle="180"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="#ADADAD"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="SortingToggleButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}"/>
        <Setter Property="Background" Value="{StaticResource ButtonNormalBackground}"/>
        <Setter Property="BorderBrush" Value="{StaticResource ButtonNormalBorder}"/>
        <Setter Property="BorderThickness" Value="2.5"/>
        <Setter Property="Foreground" Value="{StaticResource ButtonForeground}"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="Chrome" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true" HorizontalAlignment="Stretch">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition/>
                                <ColumnDefinition Width="20"/>
                            </Grid.ColumnDefinitions>
                            <ContentPresenter Grid.Column="0" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>

                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" Value="{StaticResource ButtonHoverBackground}"/>

                        </Trigger>
                       
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="#ADADAD"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type CheckBox}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <!--<Setter Property="Background" Value="{StaticResource CheckBoxFillNormal}"/>
        <Setter Property="BorderBrush" Value="{StaticResource CheckBoxStroke}"/>-->
        <Setter Property="BorderThickness" Value="1"/>
        <!--<Setter Property="FocusVisualStyle" Value="{StaticResource EmptyCheckBoxFocusVisual}"/>-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Grid >
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition/>
                            <ColumnDefinition/>
                        </Grid.ColumnDefinitions>
                        <Path Stretch="Fill" Margin="-0.5,0,0,0" Data="F1 M 410.5,360.458C 410.5,361.011 410.052,361.458 409.5,361.458L 400.5,361.458C 399.948,361.458 399.5,361.011 399.5,360.458L 399.5,351.542C 399.5,350.989 399.948,350.542 400.5,350.542L 409.5,350.542C 410.052,350.542 410.5,350.989 410.5,351.542L 410.5,360.458 Z " HorizontalAlignment="Left" Height="11.989" VerticalAlignment="center" Width="12" SnapsToDevicePixels="True">
                            <Path.Fill>
                                <LinearGradientBrush EndPoint="0.572,0.977" StartPoint="0.557,-0.046">
                                    <GradientStop Color="#FF757575" Offset="0"/>
                                    <GradientStop Color="#FF090909" Offset="1"/>
                                </LinearGradientBrush>
                            </Path.Fill>
                        </Path>
                        <Path x:Name="path" Stretch="Fill" Data="F1 M 410.5,360.458C 410.5,361.011 410.052,361.458 409.5,361.458L 400.5,361.458C 399.948,361.458 399.5,361.011 399.5,360.458L 399.5,351.542C 399.5,350.989 399.948,350.542 400.5,350.542L 409.5,350.542C 410.052,350.542 410.5,350.989 410.5,351.542L 410.5,360.458 Z " HorizontalAlignment="left
							" Height="10.917" VerticalAlignment="center" Width="11" SnapsToDevicePixels="True">
                            <Path.Fill>
                                <LinearGradientBrush EndPoint="0.867,0.928" StartPoint="0.45,0.323">
                                    <GradientStop Color="#FFE89836" Offset="0"/>
                                    <GradientStop Color="#FFE27E05" Offset="0.007"/>
                                    <GradientStop Color="#FFF6B533" Offset="0.871"/>
                                </LinearGradientBrush>
                            </Path.Fill>
                        </Path>
                        <Path x:Name="path1" Stretch="Fill" Data="F1 M 408.542,353.917C 409.219,353.917 409.873,354.006 410.5,354.157L 410.5,351.542C 410.5,350.989 410.052,350.542 409.5,350.542L 400.5,350.542C 399.948,350.542 399.5,350.989 399.5,351.542L 399.5,360.458C 399.5,361.011 399.948,361.458 400.5,361.458L 400.583,361.458C 400.584,357.294 404.147,353.917 408.542,353.917 Z " HorizontalAlignment="left" Height="10.917"  VerticalAlignment="center" Width="11" SnapsToDevicePixels="True">
                            <Path.Fill>
                                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                    <GradientStop Color="#FFE7B053" Offset="0.083"/>
                                    <GradientStop Color="#FFF1B55E" Offset="0.088"/>
                                    <GradientStop Color="#FFEDAF64" Offset="0.432"/>
                                    <GradientStop Color="#FFF1BB76" Offset="0.44"/>
                                    <GradientStop Color="#FFF1BB76" Offset="0.549"/>
                                    <GradientStop Color="#FFF4C687" Offset="0.554"/>
                                    <GradientStop Color="#FFF7D397" Offset="0.9"/>
                                    <GradientStop Color="#FFEFC06C" Offset="0.906"/>
                                </LinearGradientBrush>
                            </Path.Fill>
                        </Path>
                        <Path x:Name="tick" Stretch="Fill" Visibility="Hidden" Fill="#FF0F0F0F" Data="F1 M 369.826,310.103L 373.733,305.501L 377.519,315.077L 391.722,297.754L 391.722,303.947L 377.197,318.47L 369.826,310.103 Z " HorizontalAlignment="left" Height="11.716" VerticalAlignment="center" Width="10.896"/>
                        <ContentPresenter Grid.Column="1" Margin="{TemplateBinding Padding}"></ContentPresenter>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Fill" TargetName="path1">
                                <Setter.Value>
                                    <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                        <GradientStop Color="#FFF9CA61" Offset="0.126"/>
                                        <GradientStop Color="#FFF5CC8E" Offset="0.856"/>
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Fill" TargetName="path">
                                <Setter.Value>
                                    <LinearGradientBrush EndPoint="0.867,0.928" StartPoint="0.45,0.323">
                                        <GradientStop Color="#FFEC9E29" Offset="0.097"/>
                                        <GradientStop Color="#FFE1861C" Offset="0.903"/>
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Visibility" Value="Visible" TargetName="tick"/>
                            <Setter Property="Fill" TargetName="path1">
                                <Setter.Value>
                                    <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                        <GradientStop Color="#FFE28F3F" Offset="0.095"/>
                                        <GradientStop Color="#FFDF8C4F" Offset="0.107"/>
                                        <GradientStop Color="#FFDF8C4F" Offset="0.274"/>
                                        <GradientStop Color="#FFE69F5F" Offset="0.286"/>
                                        <GradientStop Color="#FFE69F5F" Offset="0.452"/>
                                        <GradientStop Color="#FFECAE6E" Offset="0.464"/>
                                        <GradientStop Color="#FFECAE6E" Offset="0.631"/>
                                        <GradientStop Color="#FFF1BD7E" Offset="0.643"/>
                                        <GradientStop Color="#FFF1BD7E" Offset="0.81"/>
                                        <GradientStop Color="#FFF6CB8E" Offset="0.821"/>
                                        <GradientStop Color="#FFF6CB8E" Offset="0.988"/>
                                        <GradientStop Color="#FFF7C36F" Offset="1"/>
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Fill" TargetName="path">
                                <Setter.Value>
                                    <LinearGradientBrush EndPoint="0.867,0.928" StartPoint="0.45,0.323">
                                        <GradientStop Color="#FFDD7100" Offset="0.077"/>
                                        <GradientStop Color="#FFFDAC01" Offset="0.912"/>
                                        <GradientStop Color="#FFFFBB23" Offset="0.923"/>
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="HasContent" Value="true">
                            <Setter Property="FocusVisualStyle" Value="{StaticResource CheckRadioFocusVisual}"/>
                            <Setter Property="Padding" Value="4,0,0,0"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="FilterToggleButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}"/>
        <!--<Setter Property="Background" Value="Red"/>
        <Setter Property="BorderBrush" Value="Transparent"/>-->
        <Setter Property="BorderThickness" Value="2.5"/>
        <Setter Property="Foreground" Value="{StaticResource ButtonForeground}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="Chrome" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
                        <Grid>
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>

                            <!--<Path Data="M0,0L3.5,4 7,0z" Grid.Column="1" HorizontalAlignment="Center" Height="5" Width="8" Stretch="Fill" Fill="White" Name="Arrow" VerticalAlignment="Center" RenderTransformOrigin="0.5,0.5" Visibility="Collapsed">
                            </Path>
                            <Path x:Name="filter" Grid.Column="1" Height="10" Width="10" Stroke="#FF2D2D2D" StrokeThickness=".5" Fill="#FF9E9E9E" Stretch="Fill" Data="F1 M-52.4101,25.244457 L-52.4101,25.549272 -49.082065,29.9129 -49.082065,33.3292 -47.400635,33.3292 -47.400635,29.9791 -43.9945,25.52781 -43.9945,25.159057 -52.4101,25.244457 z" Visibility="Collapsed" VerticalAlignment="Center" HorizontalAlignment="Center"/>-->

                        </Grid>
                    </Border>
                    <!--<ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Arrow" Property="Visibility" Value="Visible"/>
                            <Setter Property="Background" Value="Green"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter TargetName="Arrow" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="filter" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="#ADADAD"/>
                        </Trigger>
                    </ControlTemplate.Triggers>-->
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}"/>
        <Setter Property="Background" Value="{StaticResource ButtonNormalBackground}"/>
        <Setter Property="BorderBrush" Value="{StaticResource ButtonNormalBorder}"/>
        <Setter Property="BorderThickness" Value="2.5"/>
        <Setter Property="Foreground" Value="{StaticResource ButtonForeground}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="Chrome" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true" CornerRadius="5">
                        <!--<Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition/>
                                <ColumnDefinition Width="20"/>
                            </Grid.ColumnDefinitions>-->
                        <ContentPresenter Grid.Column="0" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>

                        <!--<Path Data="M0,0L3.5,4 7,0z" Grid.Column="1" HorizontalAlignment="Center" Height="5" Width="8" Stretch="Fill" Fill="White" Name="Arrow" VerticalAlignment="Center" RenderTransformOrigin="0.5,0.5">
                            </Path>-->
                        <!--</Grid>-->
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" Value="{StaticResource ButtonHoverBackground}"/>

                        </Trigger>

                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="#ADADAD"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--ListBox-->

    <SolidColorBrush x:Key="ListBorder" Color="#828790"/>
    <LinearGradientBrush x:Key="ListBoxBackground" EndPoint="0.5,1" StartPoint="0.5,0">
        <GradientStop Color="#FFF08F00" Offset="0.013"/>
        <GradientStop Color="#FFC04F00" Offset="0.996"/>
        <GradientStop Color="#FFA25A29" Offset="1"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="SidePanelBackground" Color="Transparent"/>
    <SolidColorBrush x:Key="SidePanelBorder" Color="White"/>
    <SolidColorBrush x:Key="ListBoxForeground" Color="White"/>

    <LinearGradientBrush x:Key="ListBoxItemHoverBrush" EndPoint="0.65,0.952" StartPoint="0.65,0.04">
        <GradientStop Offset="0" Color="#19FFFFFF"/>
        <GradientStop Offset="0.263" Color="#0CFFFFFF"/>
        <GradientStop Color="#66FFFFFF" Offset="0.897"/>
        <GradientStop Color="#66FFFFFF" Offset="1"/>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="ListBoxItemSelectedBrush" EndPoint="0.65,0.952" StartPoint="0.65,0.04">
        <GradientStop Offset="0" Color="#33FFFFFF"/>
        <GradientStop Offset="0.263" Color="#2DFFFFFF"/>
        <GradientStop Color="#A5FFFFFF" Offset="0.897"/>
        <GradientStop Color="#A4FFFFFF" Offset="1"/>
    </LinearGradientBrush>

    <!--<Style TargetType="{x:Type ListBoxItem}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Padding" Value="2,0,0,0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="true">
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="true"/>
                                <Condition Property="Selector.IsSelectionActive" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="Transparent"/>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>-->

    <Style TargetType="{x:Type ListBox}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Foreground" Value="{StaticResource ListBoxForeground}"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBox}">
                    <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">

                        <ScrollViewer Focusable="false" Grid.Column="1" >
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </ScrollViewer>

                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--<Style x:Key="HorizontalListBoxItemStyle" TargetType="{x:Type ListBoxItem}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Padding" Value="2,0,0,0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>-->

    <Style x:Key="ListBoxItemStyle" TargetType="{x:Type ListBoxItem}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>       
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true" HorizontalAlignment="Stretch">                       
                        <ContentPresenter  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>                        
                    </Border>                    
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ListBoxStyle" TargetType="{x:Type ListBox}">
        <Setter Property="Background" Value="{StaticResource ListBoxBackground}"/>
        <Setter Property="BorderBrush" Value="{StaticResource ListBorder}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Foreground" Value="{StaticResource ListBoxForeground}"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBox}">
                    <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">                        
                        <ScrollViewer Focusable="false" Grid.Column="1" >
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </ScrollViewer>                        
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <SolidColorBrush x:Key="CornerBackground" Color="#FF7E7A79"/>

    <LinearGradientBrush x:Key="ScrollBarThumbBackground" EndPoint="0.5,1" StartPoint="0.5,0">
        <GradientStop Color="#FF7C7C7C" Offset="0.043"/>
        <GradientStop Color="#FF606060" Offset="0.957"/>
    </LinearGradientBrush>

    <SolidColorBrush x:Key="ThumbBorderBrush" Color="Black"/>

    <LinearGradientBrush x:Key="ScrollBarThumbHoverBackground" EndPoint="0.5,1" StartPoint="0.5,0">
        <GradientStop Color="#FF999999" Offset="0.174"/>
        <GradientStop Color="#FF898989" Offset="0.826"/>
    </LinearGradientBrush>

    <SolidColorBrush x:Key="ScrollBarBackground" Color="#FF434343"/>
    <LinearGradientBrush x:Key="ScrollBarRepeatButtonBackground" EndPoint="0.985,0.985" StartPoint="0,-0.015">
        <GradientStop Color="#FFA2A2A2" Offset="0"/>
        <GradientStop Color="#FF7E7E7E" Offset="1"/>
        <GradientStop Color="#FF959595" Offset="0.483"/>
        <GradientStop Color="#FF6D6D6D" Offset="0.552"/>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="ScrollBarRepeatButtonBorder" EndPoint="0.5,1" StartPoint="0.5,0">
        <GradientStop Color="#FF717171" Offset="0"/>
        <GradientStop Color="#FF010101" Offset="1"/>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="ScrollBarRepeatButtonPressedBackground" EndPoint="0.985,0.985" StartPoint="0,-0.015">
        <GradientStop Color="#FF777777" Offset="0"/>
        <GradientStop Color="#FF5E5E5E" Offset="1"/>
        <GradientStop Color="#FF8D8D8D" Offset="0.483"/>
        <GradientStop Color="#FF5D5D5D" Offset="0.552"/>
    </LinearGradientBrush>

    <SolidColorBrush x:Key="ScrollBarRepeatButtonsPathFill" Color="Black"/>

    <Style x:Key="ScrollBarDownButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" BorderBrush="{StaticResource ScrollBarRepeatButtonBorder}" BorderThickness="{TemplateBinding BorderThickness}" Name="PART_Repeat" Background="{StaticResource ScrollBarRepeatButtonBackground}" CornerRadius="4">
                        <!--<Border Background="Transparent" BorderThickness="1" CornerRadius="1" Name="InnerBorderBrush">-->
                        <Path Data="M0,0L3.5,4 7,0z" HorizontalAlignment="Center" Height="5" Width="8" Stretch="Fill" Fill="{StaticResource ScrollBarRepeatButtonsPathFill}" Name="Arrow" VerticalAlignment="Center" />
                        <!--</Border>-->
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="PART_Repeat" Property="Background" Value="{StaticResource ScrollBarRepeatButtonPressedBackground}"/>
                        </Trigger>

                        <!--<Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="InnerBorderBrush" Property="BorderBrush" Value="#FFE9ECF2"/>
                        </Trigger>-->
                        <!--<Trigger Property="UIElement.IsEnabled" Value="False">
                            <Setter Property="Fill" TargetName="Arrow" Value="{StaticResource TriangleInner}"/>
                        </Trigger>-->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ScrollBarLeftButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border  Height="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}"
									BorderBrush="{StaticResource ScrollBarRepeatButtonBorder}" BorderThickness="{TemplateBinding BorderThickness}" Name="PART_Repeat" Background="{StaticResource ScrollBarRepeatButtonBackground}" CornerRadius="4">
                        <Path Data=" M 7 1 L 3 5 L 7 9 z" Stretch="Fill" Height="8" Width="5" HorizontalAlignment="Center" Fill="{StaticResource ScrollBarRepeatButtonsPathFill}" Name="Arrow" VerticalAlignment="Center" >
                        </Path>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="PART_Repeat" Property="Background" Value="{StaticResource ScrollBarRepeatButtonPressedBackground}"/>
                        </Trigger>
                        <!--<Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="PART_Repeat" Property="Background" Value="{StaticResource HorizontalThumbPressedBackground.Blue}"/>
                            <Setter TargetName="PART_Repeat" Property="BorderBrush" Value="{StaticResource ThumbBorderBrush.Blue}"/>
                            <Setter TargetName="Arrow" Property="Fill" Value="#FF404C6B"/>
                        </Trigger>

                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="InnerBorderBrush" Property="BorderBrush" Value="#FFE9ECF2"/>
                        </Trigger>-->

                        <!--<Trigger Property="UIElement.IsEnabled" Value="False">
                            <Setter Property="Fill" TargetName="Arrow" Value="{StaticResource TriangleInner}"/>
                        </Trigger>-->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ScrollBarRightButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border Height="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}"
									BorderBrush="{StaticResource ScrollBarRepeatButtonBorder}" BorderThickness="{TemplateBinding BorderThickness}" Name="PART_Repeat" Background="{StaticResource ScrollBarRepeatButtonBackground}" CornerRadius="4">
                        <Path Data="M 3 1 L 7 5 L 3 9 z" Height="8" Width="5" Stretch="Fill" HorizontalAlignment="Center" Fill="{StaticResource ScrollBarRepeatButtonsPathFill}" Name="Arrow" VerticalAlignment="Center" >
                        </Path>
                    </Border>
                    <ControlTemplate.Triggers>

                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="PART_Repeat" Property="Background" Value="{StaticResource ScrollBarRepeatButtonPressedBackground}"/>
                        </Trigger>

                        <!--<Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="PART_Repeat" Property="Background" Value="{StaticResource HorizontalThumbPressedBackground.Blue}"/>
                            <Setter TargetName="PART_Repeat" Property="BorderBrush" Value="{StaticResource ThumbBorderBrush.Blue}"/>
                            <Setter TargetName="Arrow" Property="Fill" Value="#FF404C6B"/>

                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="InnerBorderBrush" Property="BorderBrush" Value="#FFE9ECF2"/>
                        </Trigger>-->

                        <!--<Trigger Property="UIElement.IsEnabled" Value="False">
                            <Setter Property="Fill" TargetName="Arrow" Value="{StaticResource TriangleInner}"/>
                        </Trigger>-->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ScrollBarUpButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="BorderThickness" Value="1"/>

        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">

                    <Border Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" BorderBrush="{StaticResource ScrollBarRepeatButtonBorder}" BorderThickness="{TemplateBinding BorderThickness}" Name="PART_Repeat" Background="{StaticResource ScrollBarRepeatButtonBackground}" CornerRadius="4">
                        <Border Background="Transparent" BorderThickness="1" CornerRadius="1" Name="InnerBorderBrush">

                            <Path Data="M0,4 L7,4 3.5,0z" HorizontalAlignment="Center" Height="4" Width="8" Stretch="Fill" Fill="{StaticResource ScrollBarRepeatButtonsPathFill}" Name="Arrow" VerticalAlignment="Center" >

                            </Path>
                        </Border>
                    </Border>

                    <ControlTemplate.Triggers>

                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="PART_Repeat" Property="Background" Value="{StaticResource ScrollBarRepeatButtonPressedBackground}"/>
                        </Trigger>
                        <!--<Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="PART_Repeat" Property="Background" Value="{StaticResource VerticalThumbPressedBackground.Blue}"/>
                            <Setter TargetName="PART_Repeat" Property="BorderBrush" Value="{StaticResource ThumbBorderBrush.Blue}"/>
                            <Setter TargetName="Arrow" Property="Fill" Value="#FF404C6B"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="InnerBorderBrush" Property="BorderBrush" Value="#FFE9ECF2"/>
                        </Trigger>-->


                        <!--<Trigger Property="UIElement.IsEnabled" Value="False">
                            <Setter Property="Fill" TargetName="Arrow" Value="{StaticResource TriangleInner}"/>
                        </Trigger>-->

                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ScrollBarVerticalThumb" TargetType="{x:Type Thumb}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="Control.Template" >
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Grid>
                        <Border BorderBrush="{StaticResource ThumbBorderBrush}" CornerRadius="3" BorderThickness="1" Name="PART_RepeatThumb" Background="{StaticResource ScrollBarThumbBackground}">
                        </Border>
                    </Grid>



                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="PART_RepeatThumb" Value="{StaticResource ScrollBarThumbHoverBackground}" />
                            <!--<Setter Property="BorderBrush" TargetName="PART_RepeatThumb" Value="{StaticResource ThumbHighlightBorderBrush.Blue}" />-->

                        </Trigger>
                        <Trigger Property="IsDragging"  Value="True">
                            <Setter Property="Background" TargetName="PART_RepeatThumb" Value="{StaticResource ScrollBarThumbHoverBackground}" />
                            <!--<Setter Property="BorderBrush" TargetName="PART_RepeatThumb" Value="{StaticResource ThumbPressedBorderBrush.Blue}" />-->
                        </Trigger>


                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ScrollBarHorizontalThumb" TargetType="{x:Type Thumb}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>




        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Grid >
                        <Border BorderBrush="{StaticResource ThumbBorderBrush}" CornerRadius="3" BorderThickness="1" Name="PART_RepeatThumb" Background="{StaticResource ScrollBarThumbBackground}">
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="PART_RepeatThumb" Value="{StaticResource ScrollBarThumbHoverBackground}" />
                            <!--<Setter Property="BorderBrush" TargetName="PART_RepeatThumb" Value="{StaticResource ThumbHighlightBorderBrush.Blue}" />-->
                        </Trigger>
                        <Trigger Property="IsDragging"  Value="True">
                            <Setter Property="Background" TargetName="PART_RepeatThumb" Value="{StaticResource ScrollBarThumbHoverBackground}" />
                            <!--<Setter Property="BorderBrush" TargetName="PART_RepeatThumb" Value="{StaticResource ThumbPressedBorderBrush.Blue}" />-->
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="HorizontalScrollBarPageButton"
           TargetType="{x:Type RepeatButton}">
        <Setter Property="OverridesDefaultStyle"
                Value="true"/>
        <Setter Property="Background"
                Value="Transparent"/>
        <Setter Property="Focusable"
                Value="false"/>
        <Setter Property="IsTabStop"
                Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Rectangle Fill="{TemplateBinding Background}"
                               Width="{TemplateBinding Width}"
                               Height="{TemplateBinding Height}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="VerticalScrollBarPageButton"
           TargetType="{x:Type RepeatButton}">
        <Setter Property="OverridesDefaultStyle"
                Value="true"/>
        <Setter Property="Background"
                Value="Transparent"/>
        <Setter Property="Focusable"
                Value="false"/>
        <Setter Property="IsTabStop"
                Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Rectangle Fill="{TemplateBinding Background}"
                               Width="{TemplateBinding Width}"
                               Height="{TemplateBinding Height}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ScrollBarStyle"
           TargetType="{x:Type ScrollBar}">
        <Setter Property="Background" Value="{StaticResource ScrollBarBackground}"/>
        <!--<Setter Property="Foreground" Value="{StaticResource ForegroundBrush.Blue}"/>-->
        <Setter Property="Stylus.IsPressAndHoldEnabled"
                Value="false"/>
        <Setter Property="Stylus.IsFlicksEnabled"
                Value="false"/>
        <Setter Property="Width"
                Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"/>
        <Setter Property="MinWidth"
                Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">
                    <Grid Name="Bg"
                          Background="{TemplateBinding Background}"                          
                          SnapsToDevicePixels="true">

                        <Grid.RowDefinitions>
                            <RowDefinition MaxHeight="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}"/>
                            <RowDefinition Height="0.00001*"/>
                            <RowDefinition MaxHeight="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}"/>
                        </Grid.RowDefinitions>

                        <RepeatButton Name="UpButton" Style="{StaticResource ScrollBarUpButton}"
                                      IsEnabled="{TemplateBinding IsMouseOver}"
                                      Command="{x:Static ScrollBar.LineUpCommand}"
                                      />
                        <Track Grid.Row="1" Name="PART_Track"
                               IsEnabled="{TemplateBinding IsMouseOver}"
                               IsDirectionReversed="true">
                            <Track.DecreaseRepeatButton>
                                <RepeatButton Style="{StaticResource VerticalScrollBarPageButton}" Command="{x:Static ScrollBar.PageUpCommand}"/>
                            </Track.DecreaseRepeatButton>
                            <Track.Thumb>
                                <Thumb Style="{StaticResource ScrollBarVerticalThumb}"/>
                            </Track.Thumb>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton Style="{StaticResource VerticalScrollBarPageButton}" Command="{x:Static ScrollBar.PageDownCommand}"/>
                            </Track.IncreaseRepeatButton>

                        </Track>

                        <RepeatButton Name="DownButton" Style="{StaticResource ScrollBarDownButton}"
                                    Grid.Row="2"
                                      IsEnabled="{TemplateBinding IsMouseOver}"
                                      Command="{x:Static ScrollBar.LineDownCommand}"
                                     />

                    </Grid>
                    <!--</Border>-->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter TargetName="Bg"
                                            Property="Opacity"
                                            Value="0.7"/>
                        </Trigger>
                        <!--<Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="UpButton" Value="{StaticResource VerticalThumbBackground}" />
                            <Setter Property="BorderBrush" TargetName="UpButton" Value="{StaticResource ThumbBorderBrush.Blue}" />

                            <Setter Property="Background" TargetName="DownButton" Value="{StaticResource VerticalThumbBackground}" />
                            <Setter Property="BorderBrush" TargetName="DownButton" Value="{StaticResource ThumbBorderBrush.Blue}" />

                        </Trigger>-->

                        <!--<MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" SourceName="PART_Track"
                                           Value="False"/>
                                <Condition SourceName="UpButton" Property="IsMouseOver"
                                           Value="True"/>
                            </MultiTrigger.Conditions>

                            <Setter Property="Background" TargetName="UpButton" Value="{StaticResource VerticalThumbHightlightBackground.Blue}" />
                            <Setter Property="BorderBrush" TargetName="UpButton" Value="{StaticResource ThumbBorderBrush.Blue}" />

                            <Setter Property="Background" TargetName="DownButton" Value="{StaticResource VerticalThumbHightlightBackground.Blue}" />
                            <Setter Property="BorderBrush" TargetName="DownButton" Value="{StaticResource ThumbBorderBrush.Blue}" />

                        </MultiTrigger>-->
                        <!--<MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" SourceName="PART_Track"
                                           Value="False"/>
                                <Condition SourceName="DownButton" Property="IsMouseOver"
                                           Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="UpButton" Value="{StaticResource VerticalThumbHightlightBackground.Blue}" />
                            <Setter Property="BorderBrush" TargetName="UpButton" Value="{StaticResource ThumbBorderBrush.Blue}" />

                            <Setter Property="Background" TargetName="DownButton" Value="{StaticResource VerticalThumbHightlightBackground.Blue}" />
                            <Setter Property="BorderBrush" TargetName="DownButton" Value="{StaticResource ThumbBorderBrush.Blue}" />

                        </MultiTrigger>-->

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Orientation"
                     Value="Horizontal">
                <Setter Property="Width"
                        Value="Auto"/>
                <Setter Property="MinWidth"
                        Value="0"/>
                <Setter Property="Height"
                        Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}"/>
                <Setter Property="MinHeight"
                        Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}"/>
                <Setter Property="Background" Value="{StaticResource ScrollBarBackground}"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ScrollBar}">
                            <Grid Name="Bg" Background="{TemplateBinding Background}"
                                  SnapsToDevicePixels="true">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}"/>
                                    <ColumnDefinition Width="0.00001*"/>
                                    <ColumnDefinition MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}"/>
                                </Grid.ColumnDefinitions>
                                <RepeatButton Name="LeftButton" Style="{StaticResource ScrollBarLeftButton}"
                                              IsEnabled="{TemplateBinding IsMouseOver}"
                                              Command="{x:Static ScrollBar.LineLeftCommand}"
                                              />
                                <Track Grid.Column="1"
                                       Name="PART_Track"
                                       IsEnabled="{TemplateBinding IsMouseOver}">
                                    <Track.DecreaseRepeatButton>
                                        <RepeatButton Style="{StaticResource HorizontalScrollBarPageButton}"
                                                      Command="{x:Static ScrollBar.PageLeftCommand}"/>
                                    </Track.DecreaseRepeatButton>
                                    <Track.IncreaseRepeatButton>
                                        <RepeatButton Style="{StaticResource HorizontalScrollBarPageButton}"
                                                      Command="{x:Static ScrollBar.PageRightCommand}"/>
                                    </Track.IncreaseRepeatButton>
                                    <Track.Thumb>
                                        <Thumb Style="{StaticResource ScrollBarHorizontalThumb}"
                                               />
                                    </Track.Thumb>
                                </Track>
                                <RepeatButton Name="RightButton" Style="{StaticResource ScrollBarRightButton}"
                                              Grid.Column="2"
                                              IsEnabled="{TemplateBinding IsMouseOver}"
                                              Command="{x:Static ScrollBar.LineRightCommand}"
                                              />
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsEnabled"
                                         Value="false">
                                    <Setter TargetName="Bg"
                                            Property="Opacity"
                                            Value="0.7"/>
                                </Trigger>
                                <!--<Trigger Property="IsMouseOver" Value="True">

                                    <Setter Property="Background" TargetName="LeftButton" Value="{StaticResource HorizontalThumbBackground.Blue}" />
                                    <Setter Property="BorderBrush" TargetName="LeftButton" Value="{StaticResource ThumbBorderBrush.Blue}" />

                                    <Setter Property="Background" TargetName="RightButton" Value="{StaticResource HorizontalThumbBackground.Blue}" />
                                    <Setter Property="BorderBrush" TargetName="RightButton" Value="{StaticResource ThumbBorderBrush.Blue}" />

                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsMouseOver" SourceName="PART_Track"
                                           Value="False"/>
                                        <Condition SourceName="LeftButton" Property="IsMouseOver"
                                           Value="True"/>
                                    </MultiTrigger.Conditions>
                                    <Setter Property="Background" TargetName="LeftButton" Value="{StaticResource HorizontalThumbHightlightBackground.Blue}" />
                                    <Setter Property="BorderBrush" TargetName="LeftButton" Value="{StaticResource ThumbBorderBrush.Blue}" />

                                    <Setter Property="Background" TargetName="RightButton" Value="{StaticResource HorizontalThumbHightlightBackground.Blue}" />
                                    <Setter Property="BorderBrush" TargetName="RightButton" Value="{StaticResource ThumbBorderBrush.Blue}" />
                                </MultiTrigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsMouseOver" SourceName="PART_Track"
                                           Value="False"/>
                                        <Condition SourceName="RightButton" Property="IsMouseOver"
                                           Value="True"/>
                                    </MultiTrigger.Conditions>
                                    <Setter Property="Background" TargetName="LeftButton" Value="{StaticResource HorizontalThumbHightlightBackground.Blue}" />
                                    <Setter Property="BorderBrush" TargetName="LeftButton" Value="{StaticResource ThumbBorderBrush.Blue}" />

                                    <Setter Property="Background" TargetName="RightButton" Value="{StaticResource HorizontalThumbHightlightBackground.Blue}" />
                                    <Setter Property="BorderBrush" TargetName="RightButton" Value="{StaticResource ThumbBorderBrush.Blue}" />

                                </MultiTrigger>-->
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type ScrollViewer}">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid x:Name="Grid" Background="{TemplateBinding Background}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <Rectangle x:Name="Corner" Fill="{StaticResource CornerBackground}" Grid.Column="1" Grid.Row="1"/>
                        <ScrollContentPresenter Margin="{TemplateBinding Padding}" x:Name="PART_ScrollContentPresenter" Grid.Column="0" Grid.Row="0" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" CanContentScroll="{TemplateBinding CanContentScroll}" CanHorizontallyScroll="False" CanVerticallyScroll="False"/>
                        <ScrollBar Style="{StaticResource ScrollBarStyle}" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Cursor="Arrow" x:Name="PART_VerticalScrollBar" Grid.Column="1" Grid.Row="0" ViewportSize="{TemplateBinding ViewportHeight}" Maximum="{TemplateBinding ScrollableHeight}" Minimum="0" Value="{Binding Path=VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" AutomationProperties.AutomationId="VerticalScrollBar"/>
                        <ScrollBar Style="{StaticResource ScrollBarStyle}" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Cursor="Arrow" x:Name="PART_HorizontalScrollBar" Grid.Column="0" Grid.Row="1" Orientation="Horizontal" ViewportSize="{TemplateBinding ViewportWidth}" Maximum="{TemplateBinding ScrollableWidth}" Minimum="0" Value="{Binding Path=HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" AutomationProperties.AutomationId="HorizontalScrollBar"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Expander-->

    <SolidColorBrush x:Key="ExpanderHeaderBackground" Color="#FF1F1F1F"/>

    <Style x:Key="BlendExpanderDownHeaderStyle"
           TargetType="{x:Type ToggleButton}">

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Padding}">
                        <Grid Background="{StaticResource ExpanderHeaderBackground}"
                              SnapsToDevicePixels="False">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="19"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>

                            <Path x:Name="arrow"
                                  HorizontalAlignment="Center"
                                  VerticalAlignment="Center"
                                  Stroke="Transparent"
                                  Fill="White"
                                  StrokeThickness="2"
                                  SnapsToDevicePixels="false"
                                  Data="M 0 0 L 0 9 L 4.5 4.5" />
                            <ContentPresenter Grid.Column="1"
                                              Margin="4,0,0,0"
                                              HorizontalAlignment="Left"
                                              VerticalAlignment="Center"
                                              SnapsToDevicePixels="True"
                                              RecognizesAccessKey="True"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked"
                                 Value="true">
                            <Setter Property="Data"
                                    Value="M0,0L3.5,4 7,0z"
                                    TargetName="arrow"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <SolidColorBrush x:Key="ExpanderBackground" Color="Transparent"/>
    <SolidColorBrush x:Key="ExpanderBorderBrush" Color="Transparent"/>
    <SolidColorBrush x:Key="ExpanderForeground" Color="White"/>

    <Style
           TargetType="{x:Type Expander}">
        <Setter Property="Foreground" Value="{StaticResource ExpanderForeground}"/>
        <Setter Property="Background" Value="{StaticResource ExpanderBackground}"/>
        <Setter Property="BorderBrush" Value="{StaticResource ExpanderBorderBrush}"/>
        <Setter Property="HorizontalContentAlignment"
                Value="Stretch"/>
        <Setter Property="VerticalContentAlignment"
                Value="Stretch"/>
        <Setter Property="HorizontalAlignment"
                Value="Stretch"/>
        <Setter Property="VerticalAlignment"
                Value="Stretch"/>
        <Setter Property="BorderThickness"
                Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            CornerRadius="3"
                            SnapsToDevicePixels="true">
                        <DockPanel>
                            <ToggleButton x:Name="HeaderSite"
                                          DockPanel.Dock="Top"
                                          Margin="1"
                                          MinWidth="0"
                                          MinHeight="0"
                                          Style="{StaticResource BlendExpanderDownHeaderStyle}"                                        
                                          IsChecked="{Binding Path=IsExpanded,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}"
                                          Content="{TemplateBinding Header}"
                                          ContentTemplate="{TemplateBinding HeaderTemplate}"
                                          ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
                                          Foreground="{TemplateBinding Foreground}"
                                          Padding="{TemplateBinding Padding}"
                                          FontFamily="{TemplateBinding FontFamily}"
                                          FontSize="{TemplateBinding FontSize}"
                                          FontStyle="{TemplateBinding FontStyle}"
                                          FontStretch="{TemplateBinding FontStretch}"
                                          FontWeight="{TemplateBinding FontWeight}"
                                          HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            <ContentPresenter x:Name="ExpandSite"
                                              DockPanel.Dock="Bottom"
                                              Visibility="Collapsed"
                                              Focusable="false"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              Margin="{TemplateBinding Padding}"/>
                        </DockPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded"
                                 Value="true">
                            <Setter Property="Visibility"
                                    Value="Visible"
                                    TargetName="ExpandSite"/>
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Opacity" Value="0.5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <BooleanToVisibilityConverter x:Key="Converter"/>

    <!--Property Grid-->
    <Style x:Key="ToggleGroupButtonStyle" TargetType="ToggleButton">
        <Setter Property="Background" Value="#FF1F3B53"/>
        <Setter Property="Foreground" Value="#FF000000"/>
        <Setter Property="Padding" Value="3"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="BorderBrush">
            <Setter.Value>
                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                    <GradientStop Color="#FFA3AEB9" Offset="0"/>
                    <GradientStop Color="#FF8399A9" Offset="0.375"/>
                    <GradientStop Color="#FF718597" Offset="0.375"/>
                    <GradientStop Color="#FF617584" Offset="1"/>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Grid x:Name="LayoutRoot">
                        <vsm:VisualStateManager.VisualStateGroups>
                            <vsm:VisualStateGroup x:Name="CommonStates">
                                <vsm:VisualState x:Name="Disabled"/>
                                <vsm:VisualState x:Name="Normal"/>
                                <vsm:VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="MouseOverRect">
                                            <DiscreteObjectKeyFrame KeyTime="0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Visible</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </vsm:VisualState>
                                <vsm:VisualState x:Name="Pressed"/>
                            </vsm:VisualStateGroup>
                            <vsm:VisualStateGroup x:Name="CheckStates">
                                <vsm:VisualState x:Name="Indeterminate"/>
                                <vsm:VisualState x:Name="Checked">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="SelectionRect">
                                            <DiscreteObjectKeyFrame KeyTime="0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Visible</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </vsm:VisualState>
                                <vsm:VisualState x:Name="Unchecked"/>
                            </vsm:VisualStateGroup>
                        </vsm:VisualStateManager.VisualStateGroups>
                        <Rectangle Stretch="Fill" StrokeThickness="0.800067" StrokeLineJoin="Round" Stroke="#FFA0A0A0" Fill="#FFBCC7D8"/>
                        <Rectangle x:Name="MouseOverRect" Stretch="Fill" StrokeThickness="0.800067" StrokeLineJoin="Round" Stroke="#FFE5C365" Visibility="Collapsed">
                            <Rectangle.Fill>
                                <LinearGradientBrush StartPoint="0.994329,1.05357" EndPoint="2.01699,1.05357">
                                    <LinearGradientBrush.RelativeTransform>
                                        <TransformGroup>
                                            <SkewTransform CenterX="0.994329" CenterY="1.05357" AngleX="1.85767" AngleY="0"/>
                                            <RotateTransform CenterX="0.994329" CenterY="1.05357" Angle="249.891"/>
                                        </TransformGroup>
                                    </LinearGradientBrush.RelativeTransform>
                                    <GradientStop Color="#FFFFEDBB" Offset="0"/>
                                    <GradientStop Color="#FFFFFBF1" Offset="1"/>
                                </LinearGradientBrush>
                            </Rectangle.Fill>
                        </Rectangle>
                        <Rectangle x:Name="SelectionRect" Stretch="Fill" StrokeThickness="0.800067" StrokeLineJoin="Round" Stroke="#FFE5C365" Fill="#FFFFEFBB" Visibility="Collapsed"/>

                        <Path Stretch="Fill" Fill="#FF6699CC" Data="F1 M11.176,5.5921502 L15.1763,5.5921502 L15.1763,6.39222 L11.1885,6.39222 L11.1885,10.4051 L10.4009,10.4051 L10.4009,6.39222 L11.176,6.39222 L11.176,5.5921502 z M15.2013,6.4172201 L16.0014,6.4172201 L16.0014,10.3926 L15.2013,10.3926 L15.2013,6.4172201 z M15.2013,10.4051 L15.2013,11.1426 L11.201,11.1426 L11.201,10.4051 L15.2013,10.4051 z" HorizontalAlignment="Left" Height="5.551" Margin="2.24,2.223,0,0" VerticalAlignment="Top" Width="5.6"/>
                        <Rectangle HorizontalAlignment="Left" Height="4" Margin="3,3,0,0" VerticalAlignment="Top" Width="4">
                            <Rectangle.Fill>
                                <LinearGradientBrush StartPoint="0.823468,1.06605" EndPoint="1.78556,1.06605">
                                    <LinearGradientBrush.RelativeTransform>
                                        <TransformGroup>
                                            <SkewTransform CenterX="0.823468" CenterY="1.06605" AngleX="-0.24667" AngleY="0"/>
                                            <RotateTransform CenterX="0.823468" CenterY="1.06605" Angle="247.938"/>
                                        </TransformGroup>
                                    </LinearGradientBrush.RelativeTransform>
                                    <GradientStop Color="#FFC0C0C0" Offset="0"/>
                                    <GradientStop Color="#FFF1F1F1" Offset="1"/>
                                </LinearGradientBrush>
                            </Rectangle.Fill>
                        </Rectangle>
                        <Path Stretch="Fill" Fill="#FF000000" Data="F1 M12.7094,7.1589594 L13.497,7.1589594 L13.497,7.9590302 L14.2971,7.9590302 L14.2971,8.7590904 L13.497,8.7590904 L13.497,9.57166 L12.7094,9.57166 L12.7094,8.7590904 L11.8969,8.7590904 L11.8969,7.9590302 L12.7094,7.9590302 L12.7094,7.1589594 z" HorizontalAlignment="Left" Height="2.413" Margin="3.783,3.837,0,0"   VerticalAlignment="Top" Width="2.4"/>
                        <Path Stretch="Fill" Fill="#FF6699CC" Data="F1 M11.176,5.5921502 L15.1763,5.5921502 L15.1763,6.39222 L11.1885,6.39222 L11.1885,10.4051 L10.4009,10.4051 L10.4009,6.39222 L11.176,6.39222 L11.176,5.5921502 z M15.2013,6.4172201 L16.0014,6.4172201 L16.0014,10.3926 L15.2013,10.3926 L15.2013,6.4172201 z M15.2013,10.4051 L15.2013,11.1426 L11.201,11.1426 L11.201,10.4051 L15.2013,10.4051 z" HorizontalAlignment="Left" Height="5.551" Margin="2.24,0,0,2.226" VerticalAlignment="Bottom" Width="5.6"/>
                        <Rectangle HorizontalAlignment="Left" Height="4" Margin="3,0,0,3" VerticalAlignment="Bottom" Width="4">
                            <Rectangle.Fill>
                                <LinearGradientBrush StartPoint="0.823468,1.06605" EndPoint="1.78556,1.06605">
                                    <LinearGradientBrush.RelativeTransform>
                                        <TransformGroup>
                                            <SkewTransform CenterX="0.823468" CenterY="1.06605" AngleX="-0.24667" AngleY="0"/>
                                            <RotateTransform CenterX="0.823468" CenterY="1.06605" Angle="247.938"/>
                                        </TransformGroup>
                                    </LinearGradientBrush.RelativeTransform>
                                    <GradientStop Color="#FFC0C0C0" Offset="0"/>
                                    <GradientStop Color="#FFF1F1F1" Offset="1"/>
                                </LinearGradientBrush>
                            </Rectangle.Fill>
                        </Rectangle>
                        <Path Stretch="Fill" Fill="#FF000000" Data="F1 M12.7094,7.1589594 L13.497,7.1589594 L13.497,7.9590302 L14.2971,7.9590302 L14.2971,8.7590904 L13.497,8.7590904 L13.497,9.57166 L12.7094,9.57166 L12.7094,8.7590904 L11.8969,8.7590904 L11.8969,7.9590302 L12.7094,7.9590302 L12.7094,7.1589594 z" HorizontalAlignment="Left" Height="2.413" Margin="3.783,0,0,3.75" VerticalAlignment="Bottom" Width="2.4"/>
                        <Rectangle Stretch="Fill" HorizontalAlignment="Right" Height="1" Margin="0,3,6,0" VerticalAlignment="Top" Width="3">
                            <Rectangle.Fill>
                                <LinearGradientBrush EndPoint="1.017,0.459" StartPoint="0.001,0.488">
                                    <GradientStop Color="#FFB2B2B2" Offset="0.222"/>
                                    <GradientStop Color="#FF9999CC" Offset="0.244"/>
                                    <GradientStop Color="#FF9999CC" Offset="0.489"/>
                                    <GradientStop Color="#FFA0A0A4" Offset="0.511"/>
                                    <GradientStop Color="#FFA0A0A4" Offset="0.756"/>
                                    <GradientStop Color="#FF669999" Offset="0.778"/>
                                </LinearGradientBrush>
                            </Rectangle.Fill>
                        </Rectangle>
                        <Rectangle Stretch="Fill" HorizontalAlignment="Right" Height="1" Margin="0,5,6,0" VerticalAlignment="Top" Width="3">
                            <Rectangle.Fill>
                                <LinearGradientBrush EndPoint="0.943,0.503" StartPoint="0.041,0.49">
                                    <GradientStop Color="#FFB1B1B1" Offset="0.212"/>
                                    <GradientStop Color="#FF9898CB" Offset="0.244"/>
                                    <GradientStop Color="#FF9898CB" Offset="0.488"/>
                                    <GradientStop Color="#FF9F9FA3" Offset="0.522"/>
                                    <GradientStop Color="#FF9F9FA3" Offset="0.766"/>
                                    <GradientStop Color="#FF669898" Offset="0.804"/>
                                </LinearGradientBrush>
                            </Rectangle.Fill>
                        </Rectangle>
                        <Rectangle Stretch="Fill" HorizontalAlignment="Right" Height="1" Margin="0,7,6,0" VerticalAlignment="Top" Width="3">
                            <Rectangle.Fill>
                                <LinearGradientBrush EndPoint="0.886,0.474" StartPoint="0.015,0.445">
                                    <GradientStop Color="#FFB0B0B0" Offset="0.233"/>
                                    <GradientStop Color="#FF9797CA" Offset="0.266"/>
                                    <GradientStop Color="#FF9797CA" Offset="0.488"/>
                                    <GradientStop Color="#FF9E9EA2" Offset="0.534"/>
                                    <GradientStop Color="#FF9D9EA2" Offset="0.756"/>
                                    <GradientStop Color="#FF669797" Offset="0.794"/>
                                </LinearGradientBrush>
                            </Rectangle.Fill>
                        </Rectangle>
                        <Rectangle Stretch="Fill" HorizontalAlignment="Right" Height="1" Margin="0,0,6,8" VerticalAlignment="Bottom" Width="3">
                            <Rectangle.Fill>
                                <LinearGradientBrush EndPoint="0.87,0.521" StartPoint="0.062,0.533">
                                    <GradientStop Color="#FFB0B0B0" Offset="0.212"/>
                                    <GradientStop Color="#FF9797CA" Offset="0.246"/>
                                    <GradientStop Color="#FF9797CA" Offset="0.478"/>
                                    <GradientStop Color="#FF9E9EA2" Offset="0.522"/>
                                    <GradientStop Color="#FF9D9EA2" Offset="0.754"/>
                                    <GradientStop Color="#FF669797" Offset="0.793"/>
                                </LinearGradientBrush>
                            </Rectangle.Fill>
                        </Rectangle>
                        <Rectangle Stretch="Fill" HorizontalAlignment="Right" Height="1" Margin="0,0,6,3" VerticalAlignment="Bottom" Width="3">
                            <Rectangle.Fill>
                                <LinearGradientBrush EndPoint="0.965,0.5" StartPoint="0.048,0.5">
                                    <GradientStop Color="#FFAFAFAF"/>
                                    <GradientStop Color="#FF669696" Offset="1"/>
                                </LinearGradientBrush>
                            </Rectangle.Fill>
                        </Rectangle>
                        <Rectangle Stretch="Fill" HorizontalAlignment="Right" Height="1" Margin="0,0,6,5" VerticalAlignment="Bottom" Width="3">
                            <Rectangle.Fill>
                                <LinearGradientBrush EndPoint="1.188,0.547" StartPoint="-0.135,0.545">
                                    <GradientStop Color="#FF777777"/>
                                    <GradientStop Color="#FF424242" Offset="0.744"/>
                                </LinearGradientBrush>
                            </Rectangle.Fill>
                        </Rectangle>
                        <Rectangle Stretch="Fill" HorizontalAlignment="Right" Height="1" Margin="0,5,3,0" VerticalAlignment="Top" Width="2">
                            <Rectangle.Fill>
                                <LinearGradientBrush EndPoint="0.920000016689301,0.513999998569489" StartPoint="0.052,0.533">
                                    <GradientStop Color="#FFB1B1B1" Offset="0.178"/>
                                    <GradientStop Color="#FF9898CB" Offset="0.223"/>
                                    <GradientStop Color="#FF9898CB" Offset="0.475"/>
                                    <GradientStop Color="#FF9F9FA5" Offset="0.51"/>
                                    <GradientStop Color="#FF9F9FA3" Offset="0.763"/>
                                    <GradientStop Color="#FF669898" Offset="0.807"/>
                                </LinearGradientBrush>
                            </Rectangle.Fill>
                        </Rectangle>
                        <Rectangle Stretch="Fill" HorizontalAlignment="Right" Height="1" Margin="0,7,3,0" VerticalAlignment="Top" Width="2">
                            <Rectangle.Fill>
                                <LinearGradientBrush EndPoint="0.920000016689301,0.513999998569489" StartPoint="0.052,0.533">
                                    <GradientStop Color="#FFB1B1B1" Offset="0.178"/>
                                    <GradientStop Color="#FF9898CB" Offset="0.223"/>
                                    <GradientStop Color="#FF9898CB" Offset="0.475"/>
                                    <GradientStop Color="#FF9F9FA5" Offset="0.51"/>
                                    <GradientStop Color="#FF9F9FA3" Offset="0.763"/>
                                    <GradientStop Color="#FF669898" Offset="0.807"/>
                                </LinearGradientBrush>
                            </Rectangle.Fill>
                        </Rectangle>
                        <Rectangle Stretch="Fill" HorizontalAlignment="Right" Height="1" Margin="0,0,3,8" VerticalAlignment="Bottom" Width="2">
                            <Rectangle.Fill>
                                <LinearGradientBrush EndPoint="0.920000016689301,0.513999998569489" StartPoint="0.052,0.533">
                                    <GradientStop Color="#FFB1B1B1" Offset="0.178"/>
                                    <GradientStop Color="#FF9898CB" Offset="0.223"/>
                                    <GradientStop Color="#FF9898CB" Offset="0.475"/>
                                    <GradientStop Color="#FF9F9FA5" Offset="0.51"/>
                                    <GradientStop Color="#FF9F9FA3" Offset="0.763"/>
                                    <GradientStop Color="#FF669898" Offset="0.807"/>
                                </LinearGradientBrush>
                            </Rectangle.Fill>
                        </Rectangle>
                        <Rectangle Stretch="Fill" HorizontalAlignment="Right" Height="1" Margin="0,0,3,3" VerticalAlignment="Bottom" Width="2">
                            <Rectangle.Fill>
                                <LinearGradientBrush EndPoint="0.92,0.514" StartPoint="0.052,0.533">
                                    <GradientStop Color="#FFB1B1B1" Offset="0.178"/>
                                    <GradientStop Color="#FF9898CB" Offset="0.223"/>
                                    <GradientStop Color="#FF9898CB" Offset="0.475"/>
                                    <GradientStop Color="#FF9F9FA5" Offset="0.51"/>
                                    <GradientStop Color="#FF9F9FA3" Offset="0.763"/>
                                    <GradientStop Color="#FF669898" Offset="0.807"/>
                                </LinearGradientBrush>
                            </Rectangle.Fill>
                        </Rectangle>
                        <Rectangle Stretch="Fill" HorizontalAlignment="Right" Height="1" Margin="0,0,3,6" VerticalAlignment="Bottom" Width="2">
                            <Rectangle.Fill>
                                <LinearGradientBrush EndPoint="0.920000016689301,0.513999998569489" StartPoint="0.052,0.533">
                                    <GradientStop Color="#FFB1B1B1" Offset="0.178"/>
                                    <GradientStop Color="#FF9898CB" Offset="0.223"/>
                                    <GradientStop Color="#FF9898CB" Offset="0.475"/>
                                    <GradientStop Color="#FF9F9FA5" Offset="0.51"/>
                                    <GradientStop Color="#FF9F9FA3" Offset="0.763"/>
                                    <GradientStop Color="#FF669898" Offset="0.807"/>
                                </LinearGradientBrush>
                            </Rectangle.Fill>
                        </Rectangle>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ToggleSortButtonStyle" TargetType="ToggleButton">
        <Setter Property="Background" Value="#FF1F3B53"/>
        <Setter Property="Foreground" Value="#FF000000"/>
        <Setter Property="Padding" Value="3"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="BorderBrush">
            <Setter.Value>
                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                    <GradientStop Color="#FFA3AEB9" Offset="0"/>
                    <GradientStop Color="#FF8399A9" Offset="0.375"/>
                    <GradientStop Color="#FF718597" Offset="0.375"/>
                    <GradientStop Color="#FF617584" Offset="1"/>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Grid x:Name="LayoutRoot">
                        <vsm:VisualStateManager.VisualStateGroups>
                            <vsm:VisualStateGroup x:Name="CommonStates">
                                <vsm:VisualState x:Name="Disabled"/>
                                <vsm:VisualState x:Name="Normal"/>
                                <vsm:VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="MouseOverRect">
                                            <DiscreteObjectKeyFrame KeyTime="0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Visible</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </vsm:VisualState>
                                <vsm:VisualState x:Name="Pressed"/>
                            </vsm:VisualStateGroup>
                            <vsm:VisualStateGroup x:Name="CheckStates">
                                <vsm:VisualState x:Name="Indeterminate"/>
                                <vsm:VisualState x:Name="Checked">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="SelectionRect">
                                            <DiscreteObjectKeyFrame KeyTime="0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Visible</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </vsm:VisualState>
                                <vsm:VisualState x:Name="Unchecked"/>
                            </vsm:VisualStateGroup>
                        </vsm:VisualStateManager.VisualStateGroups>
                        <Rectangle Stretch="Fill" StrokeThickness="0.800067" StrokeLineJoin="Round" Stroke="#FFA0A0A0" Fill="#FFBCC7D8"/>
                        <Rectangle x:Name="MouseOverRect" Stretch="Fill" StrokeThickness="0.800067" StrokeLineJoin="Round" Stroke="#FFE5C365" Visibility="Collapsed">
                            <Rectangle.Fill>
                                <LinearGradientBrush StartPoint="0.994329,1.05357" EndPoint="2.01699,1.05357">
                                    <LinearGradientBrush.RelativeTransform>
                                        <TransformGroup>
                                            <SkewTransform CenterX="0.994329" CenterY="1.05357" AngleX="1.85767" AngleY="0"/>
                                            <RotateTransform CenterX="0.994329" CenterY="1.05357" Angle="249.891"/>
                                        </TransformGroup>
                                    </LinearGradientBrush.RelativeTransform>
                                    <GradientStop Color="#FFFFEDBB" Offset="0"/>
                                    <GradientStop Color="#FFFFFBF1" Offset="1"/>
                                </LinearGradientBrush>
                            </Rectangle.Fill>
                        </Rectangle>
                        <Rectangle x:Name="SelectionRect" Stretch="Fill" StrokeThickness="0.800067" StrokeLineJoin="Round" Stroke="#FFE5C365" Fill="#FFFFEFBB" Visibility="Collapsed"/>
                        <Path Stretch="Fill" Data="F1 M -3.27903,42.1033L -6.61736,47.4788L -5.5348,47.4788C -5.02285,47.4788 -4.66467,47.4472 -4.46024,47.3841C -4.12694,47.2854 -3.84008,47.1035 -3.59966,46.8382C -3.35924,46.5728 -3.19282,46.2176 -3.10038,45.7723L -2.93773,45.7723L -3.16571,47.8201L -8.31319,47.8201L -4.97486,42.4446L -5.82544,42.4446C -6.15518,42.4446 -6.37205,42.4544 -6.47604,42.4739C -6.67335,42.5095 -6.85867,42.5808 -7.03198,42.6879C -7.2053,42.795 -7.34906,42.9374 -7.46327,43.1152C -7.57749,43.293 -7.66703,43.5178 -7.73191,43.7898L -7.88657,43.7898L -7.71592,42.1033L -3.27903,42.1033 Z " HorizontalAlignment="Left" Height="5.717" Margin="3.27,0,0,3.278" VerticalAlignment="Bottom" Width="5.375">
                            <Path.Fill>
                                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                    <GradientStop Color="#FF996666" Offset="0.003"/>
                                    <GradientStop Color="#FF993333" Offset="1"/>
                                </LinearGradientBrush>
                            </Path.Fill>
                        </Path>
                        <Path Stretch="Fill" Data="F1 M -5.28333,39.593L -7.39113,39.593L -7.65057,40.1792C -7.73285,40.3699 -7.77398,40.5274 -7.77398,40.6518C -7.77398,40.8163 -7.70667,40.9374 -7.57204,41.015C -7.49257,41.0608 -7.2981,41.0954 -6.98864,41.1188L -6.98864,41.2983L -8.97163,41.2983L -8.97163,41.1188C -8.75846,41.087 -8.58316,40.9991 -8.44573,40.8551C -8.30829,40.7111 -8.13907,40.4143 -7.93806,39.9646L -6.13516,35.7394L -5.40176,35.7228L -3.61028,40.0964C -3.40553,40.5545 -3.23771,40.843 -3.10682,40.9617C -3.00772,41.0514 -2.86748,41.1038 -2.6861,41.1188L -2.6861,41.2983L -5.51052,41.2983L -5.51052,41.1188L -5.39272,41.1188C -5.16179,41.1188 -5.00005,41.0865 -4.90749,41.022C -4.84298,40.9753 -4.81073,40.9075 -4.81073,40.8186C -4.81073,40.7663 -4.81961,40.7121 -4.83737,40.656C -4.84298,40.6298 -4.88646,40.5195 -4.96779,40.325L -5.28333,39.593 Z M -5.43619,39.2339L -6.3183,37.1879L -7.22985,39.2339L -5.43619,39.2339 Z " HorizontalAlignment="Left" Height="5.575" Margin="2.611,2.625,0,0" VerticalAlignment="Top" Width="6.286">
                            <Path.Fill>
                                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                    <GradientStop Color="#FF333399" Offset="1"/>
                                    <GradientStop Color="#FF333399"/>
                                </LinearGradientBrush>
                            </Path.Fill>
                        </Path>
                        <Path Data="M1.8749986,0 L2.8749986,0 L2.8749986,10.988282 L3.7812471,9.7068195 L4.6719999,9.7070332 L2.358901,13.375003 L0,9.7031269 L0.92190325,9.6870022 L1.8749986,10.972591 z" Fill="Black" HorizontalAlignment="Right" Margin="0,1.625,1.87,3" Stretch="Fill" StrokeThickness="0.2" StrokeLineJoin="Round" Width="5.235" Stroke="White"/>

                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

     <LinearGradientBrush x:Key="ExpanderMouseOverStrokeKey" StartPoint="0.413819,0.422206" EndPoint="0.851368,0.859752">
        <LinearGradientBrush.GradientStops>
            <GradientStop Color="#FF2BC9F7" Offset="0"/>
            <GradientStop Color="#FF1AC4F7" Offset="1"/>
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="ExpanderMouseOverFillKey" StartPoint="0.407923,0.416884" EndPoint="0.875406,0.884363">
        <LinearGradientBrush.GradientStops>
            <GradientStop Color="#FF7ADDFA" Offset="0"/>
            <GradientStop Color="#FF82DFFA" Offset="1"/>
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="ExpanderUnCheckedStrokeKey" StartPoint="0.0440532,0.499998" EndPoint="0.955947,0.499998">
        <LinearGradientBrush.GradientStops>
            <GradientStop Color="#FFA4A4A4" Offset="0"/>
            <GradientStop Color="#FF828282" Offset="1"/>
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="ExpanderUnCheckedFillKey" StartPoint="0,0.499998" EndPoint="1,0.499998">
        <LinearGradientBrush.GradientStops>
            <GradientStop Color="#FFFFFFFF" Offset="0"/>
            <GradientStop Color="#FFDBE4E3" Offset="1"/>
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="ExpanderCheckedStrokeKey" StartPoint="0.413819,0.422208" EndPoint="0.851368,0.859755">
        <LinearGradientBrush.GradientStops>
            <GradientStop Color="#FFC8C8C8" Offset="0"/>
            <GradientStop Color="#FF242424" Offset="1"/>
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="ExpanderCheckedFillKey" StartPoint="0.407923,0.416886" EndPoint="0.875406,0.884367">
        <LinearGradientBrush.GradientStops>
            <GradientStop Color="#FF555555" Offset="0"/>
            <GradientStop Color="#FF595959" Offset="1"/>
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <Style x:Key="ExpanderButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Grid x:Name="Root" Background="Transparent" RenderTransformOrigin="0.5,0.5"  Height="Auto" Width="Auto">
                        <vsm:VisualStateManager.VisualStateGroups>

                            <vsm:VisualStateGroup x:Name="CommonStates">
                                <vsm:VisualState x:Name="Normal"/>
                                <vsm:VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="UncheckedVisual" Storyboard.TargetProperty="Fill">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource ExpanderMouseOverFillKey}"/>
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="UncheckedVisual" Storyboard.TargetProperty="Stroke">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource ExpanderMouseOverStrokeKey}"/>
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="CheckedVisual" Storyboard.TargetProperty="Fill">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource ExpanderMouseOverFillKey}"/>
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="CheckedVisual" Storyboard.TargetProperty="Stroke">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource ExpanderMouseOverStrokeKey}"/>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </vsm:VisualState>
                                <vsm:VisualState x:Name="Disabled">
                                </vsm:VisualState>
                            </vsm:VisualStateGroup>

                            <vsm:VisualStateGroup x:Name="CheckStates">
                                <vsm:VisualState x:Name="Unchecked">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0:0:0.1" Storyboard.TargetName="CheckedVisual" Storyboard.TargetProperty="Opacity" To="0" />
                                        <DoubleAnimation Duration="0:0:0.1" Storyboard.TargetName="UncheckedVisual" Storyboard.TargetProperty="Opacity" To="1" />
                                    </Storyboard>
                                </vsm:VisualState>
                                <vsm:VisualState x:Name="Checked">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0:0:0.1" Storyboard.TargetName="CheckedVisual" Storyboard.TargetProperty="Opacity" To="1" />
                                        <DoubleAnimation Duration="0:0:0.1" Storyboard.TargetName="UncheckedVisual" Storyboard.TargetProperty="Opacity" To="0" />
                                    </Storyboard>
                                </vsm:VisualState>
                            </vsm:VisualStateGroup>

                        </vsm:VisualStateManager.VisualStateGroups>
                        <Path x:Name="UncheckedVisual" Stroke="{StaticResource ExpanderUnCheckedStrokeKey}" Fill="{StaticResource ExpanderUnCheckedFillKey}" Margin="0,-1,0,0" Width="5.67496" Height="8.25864" Stretch="Fill" Data="F1 M 492.891,338.23L 492.9,334.35L 492.909,330.471L 495.488,332.417L 498.066,334.362L 495.479,336.296L 492.891,338.23 Z " StrokeThickness="0.5" StrokeMiterLimit="2.75"/>
                        <Path x:Name="CheckedVisual" Stroke="{StaticResource ExpanderCheckedStrokeKey}" Fill="{StaticResource ExpanderCheckedFillKey}"  Margin="0,-1,0,0" Width="7.80862" Height="7.80865" Stretch="Fill" Data="F1 M 488.338,322.896L 488.338,322.901L 495.647,322.901L 495.647,315.592L 495.644,315.592L 488.338,322.896 Z " StrokeThickness="0.5" StrokeMiterLimit="2.75"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <SolidColorBrush x:Key="MouseOverForeground" Color="#FF040404"/>
    <SolidColorBrush x:Key="MouseOverBorderBrush" Color="#FFCCECFF"/>

    <LinearGradientBrush x:Key="MouseOverBackground" EndPoint="0.5,1" StartPoint="0.5,0">
        <GradientStop Color="#FFEFF7FD" Offset="0.056"/>
        <GradientStop Color="#FFDEEEF9" Offset="0.944"/>
        <GradientStop Color="White" Offset="1"/>
    </LinearGradientBrush>

    <SolidColorBrush x:Key="SelectedBorderBrush" Color="#FF99CCFF"/>
    <SolidColorBrush x:Key="SelectedForeground" Color="White"/>
    <SolidColorBrush x:Key="SelectedBackground" Color="#FF3399FF"/>
    <SolidColorBrush x:Key="LineColor" Color="#FFDFEEF9"/>
    <SolidColorBrush x:Key="ViewBackgroundColor" Color="Transparent"/>
    <SolidColorBrush x:Key="CategoryForeground" Color="#FF2C367E"/>
    <SolidColorBrush x:Key="ViewForeground" Color="White"/>

    <Style TargetType="{x:Type TextBox}">
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="AllowDrop" Value="true"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                        <ScrollViewer x:Name="PART_ContentHost" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <!--<Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>-->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type shared1:IntegerTextBox}">
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="PositiveForeground" Value="White"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="FontFamily" Value="Calibri"/>
        <Setter Property="FontWeight" Value="Regular"/>
        <Setter Property="AllowDrop" Value="true"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Template">

            <Setter.Value>
                <ControlTemplate  TargetType="{x:Type shared1:IntegerTextBox}">
                    <Grid>
                        <Border x:Name="Border" Opacity="1" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding CornerRadius}" SnapsToDevicePixels="True">
                            <Grid>
                                <ScrollViewer x:Name="PART_ContentHost" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Visibility="{TemplateBinding ContentElementVisibility}"/>

                                <ContentControl  x:Name="PART_Watermark" Foreground="{TemplateBinding Foreground}"
                                IsTabStop="False" IsHitTestVisible="False" Background="{TemplateBinding WatermarkBackground}"
                                FontFamily="{TemplateBinding FontFamily}" FontSize="{TemplateBinding FontSize}"
                                FontStretch="{TemplateBinding FontStretch}" FontStyle="{TemplateBinding FontStyle}" FontWeight="{TemplateBinding FontWeight}"
                                Padding="{TemplateBinding Padding}"
                                Visibility="{TemplateBinding WatermarkVisibility}" Content="{TemplateBinding WatermarkText}"
                                Opacity="{TemplateBinding WatermarkOpacity}" ContentTemplate="{TemplateBinding WatermarkTemplate}" Grid.Row="0"/>
                            </Grid>
                        </Border>

                        <!--<Border x:Name="MouseOver_Border" BorderBrush="{StaticResource TextBoxHoverBorder}" CornerRadius="{TemplateBinding CornerRadius}" BorderThickness="{TemplateBinding BorderThickness}"
                                Visibility="Collapsed"/>

                        <Border x:Name="Focused_Border" BorderBrush="{TemplateBinding FocusedBorderBrush}" CornerRadius="{TemplateBinding CornerRadius}" BorderThickness="{TemplateBinding BorderThickness}"
                                Visibility="Collapsed"/>-->

                        <Border/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>    
    

  
    <!--TaskBarItem-->

    <sync:SpeedToDurationConverter x:Key="SpeedToDurationConverter" />

    <sync:DoubleToNegativeDoubleConverter x:Key="DoubleToNegativeDoubleConverter" />

    <SolidColorBrush x:Key="TaskBarItemBorderBrush" Color="#FF242424"/>
    <SolidColorBrush x:Key="TaskBarItemBackground" Color="Transparent"/>
    <SolidColorBrush x:Key="TaskBarItemForeground" Color="#FFFFFFFF"/>

    <LinearGradientBrush x:Key="TaskBarItemHeaderBackground" EndPoint="0.475,1.086" StartPoint="0.475,-0.086">
        <GradientStop Color="#FFDF8F47" Offset="0.069"/>
        <GradientStop Color="#FFC7641E" Offset="0.541"/>
        <GradientStop Color="#FFC04F00" Offset="0.549"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="TaskBarItemHeaderForeground" Color="White"/>

    <Style x:Key="ToggleButtonStyle" TargetType="{x:Type sync:ToggleButtonExt}">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type sync:ToggleButtonExt}">
                    <Border CornerRadius="8,8,0,0">
                        <Border.Background>
                            <LinearGradientBrush EndPoint="0.475,1.086" StartPoint="0.475,-0.086">
                                <GradientStop Color="#FFEBBB90" Offset="0.152"/>
                                <GradientStop Color="#FFDDA077" Offset="0.584"/>
                                <GradientStop Color="#FFD99466" Offset="0.592"/>
                            </LinearGradientBrush>
                        </Border.Background>
                        <sync:CheckableBorder Name="checkableborder" MinHeight="19" BorderThickness="0,0,0,1" BorderBrush="{Binding Path=BorderBrush, RelativeSource={RelativeSource AncestorType={x:Type sync:TaskBarItem}}}" 
                               Background="{Binding Path=HeaderBackground, RelativeSource={RelativeSource AncestorType={x:Type sync:TaskBarItem}}}" CornerRadius="8,8,0,0" Margin="1,1,1,0">
                            <Grid>
                                <Border Name="Layer" CornerRadius="8,8,0,0">
                                    <Border.OpacityMask>
                                        <LinearGradientBrush EndPoint="0.998,0.64" StartPoint="0.002,0.664">
                                            <GradientStop Color="#00000000" Offset="0"/>
                                            <GradientStop Color="#A9FFFFFF" Offset="0.616"/>
                                            <GradientStop Color="#D7FCFCFC" Offset="1"/>
                                        </LinearGradientBrush>
                                    </Border.OpacityMask>
                                    <Border.Background>
                                        <LinearGradientBrush EndPoint="0.65,0.952" StartPoint="0.65,0.04">
                                            <GradientStop Color="#FFF9C26D"/>
                                            <GradientStop Color="#FFEF8F00" Offset="0.556"/>
                                            <GradientStop Color="#FFF9C16D" Offset="0.549"/>
                                            <GradientStop Color="#FFF19100" Offset="1"/>
                                        </LinearGradientBrush>
                                    </Border.Background>
                                </Border>

                                <DockPanel>
                                    <Border Name="bord" DockPanel.Dock="Right" ClipToBounds="True" Margin="0,0,5,0"
							Width="{Binding Path=(sync:TaskBar.ButtonSize), RelativeSource={RelativeSource AncestorType={x:Type sync:TaskBarItem}}}" 
							Height="{Binding Path=(sync:TaskBar.ButtonSize), RelativeSource={RelativeSource AncestorType={x:Type sync:TaskBarItem}}}" 
							BorderThickness="0.7" BorderBrush="Transparent" >
                                        <Path Name="path" Stretch="Fill" Data="F1 M 323.559,280.217L 393,236.422L 393,266L 471,266L 471,294L 393,294L 393,323.669L 323.559,280.217 Z " HorizontalAlignment="Left" Width="12.063" Height="10.464" VerticalAlignment="Top" Visibility="Collapsed">
                                            <Path.Stroke>
                                                <LinearGradientBrush EndPoint="0.144,0.447" StartPoint="0.986,0.447">
                                                    <GradientStop Color="#FF174D7C" Offset="0"/>
                                                    <GradientStop Color="#FF3986A8" Offset="1"/>
                                                </LinearGradientBrush>
                                            </Path.Stroke>
                                            <Path.Fill>
                                                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                                    <GradientStop Color="#FF8DD3EB" Offset="0"/>
                                                    <GradientStop Color="#FF2F84AD" Offset="1"/>
                                                </LinearGradientBrush>
                                            </Path.Fill>
                                        </Path>
                                    </Border>
                                    <ContentPresenter Name="ContentSite" Margin="0,2,0,2" HorizontalAlignment="Center" VerticalAlignment="Center"
								  ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}" RecognizesAccessKey="True" 
								  Content="{TemplateBinding ContentControl.Content}"   
				/>
                                </DockPanel>
                            </Grid>
                            <!--</Border>-->
                            <Border.Triggers>
                                <EventTrigger RoutedEvent="sync:CheckableBorder.Checked">
                                    <EventTrigger.Actions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Storyboard.TargetName="LittelButton"
									Storyboard.TargetProperty="(Border.RenderTransform).(RotateTransform.Angle)">
                                                    <DoubleAnimation.Duration>
                                                        <MultiBinding Converter="{StaticResource SpeedToDurationConverter}" ConverterParameter="Expanded">
                                                            <Binding Path="(sync:TaskBar.Speed)" RelativeSource="{RelativeSource AncestorType={x:Type sync:TaskBarItem}}"/>
                                                            <Binding Path="DesiredSize.Height" ElementName="ItemsPresenter" />
                                                            <Binding Path="SafeHeight" ElementName="PanelPresenter" />
                                                        </MultiBinding>
                                                    </DoubleAnimation.Duration>
                                                </DoubleAnimation>
                                                <!--<ColorAnimation Storyboard.TargetName="checkableborder" Storyboard.TargetProperty="Background" To="Green"/>-->
                                                <!--<ObjectAnimationUsingKeyFrames Storyboard.TargetName="checkableborder" Storyboard.TargetProperty="Background">
                                                    <DiscreteObjectKeyFrame KeyTime="0" Value="Red"/>
                                                </ObjectAnimationUsingKeyFrames>-->
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </EventTrigger.Actions>
                                </EventTrigger>
                                <EventTrigger RoutedEvent="sync:CheckableBorder.Unchecked">
                                    <EventTrigger.Actions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Storyboard.TargetName="LittelButton"
									Storyboard.TargetProperty="(Border.RenderTransform).(RotateTransform.Angle)" To="0">
                                                    <DoubleAnimation.Duration>
                                                        <MultiBinding Converter="{StaticResource SpeedToDurationConverter}" ConverterParameter="Collapsed">
                                                            <Binding Path="(sync:TaskBar.Speed)" RelativeSource="{RelativeSource AncestorType={x:Type sync:TaskBarItem}}"/>
                                                            <Binding Path="SafeHeight" ElementName="PanelPresenter" />
                                                        </MultiBinding>
                                                    </DoubleAnimation.Duration>
                                                </DoubleAnimation>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </EventTrigger.Actions>
                                </EventTrigger>
                            </Border.Triggers>
                        </sync:CheckableBorder>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsMouseOver" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation  Storyboard.TargetName="bord" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:.2" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="bord" Storyboard.TargetProperty="Opacity" Duration="0:0:.2" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                            <!--<Setter Property="Opacity" Value="1" TargetName="LittelButton"/>-->
                        </Trigger>

                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="Background" TargetName="checkableborder">
                                <Setter.Value>
                                    <LinearGradientBrush EndPoint="0.475,1.086" StartPoint="0.475,-0.086">
                                        <GradientStop Color="#FFDF8F47" Offset="0.069"/>
                                        <GradientStop Color="#FFC7641E" Offset="0.541"/>
                                        <GradientStop Color="#FFC04F00" Offset="0.549"/>
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Background" TargetName="Layer">
                                <Setter.Value>
                                    <LinearGradientBrush EndPoint="0.65,0.952" StartPoint="0.65,0.04">
                                        <GradientStop Color="#FFF9C26D"/>
                                        <GradientStop Color="#FFEF8F00" Offset="0.556"/>
                                        <GradientStop Color="#FFF9C16D" Offset="0.549"/>
                                        <GradientStop Color="#FFF19100" Offset="1"/>
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="OpacityMask" TargetName="Layer">
                                <Setter.Value>
                                    <LinearGradientBrush EndPoint="0.998,0.64" StartPoint="0.002,0.664">
                                        <GradientStop Color="#B8000000" Offset="0.254"/>
                                        <GradientStop Color="White" Offset="0.487"/>
                                        <GradientStop Color="#B7FCFCFC" Offset="0.733"/>
                                        <GradientStop Color="#00FCFCFC" Offset="0.983"/>
                                        <GradientStop Color="#00000000" Offset="0"/>
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="TextElement.Foreground" Value="Black" TargetName="ContentSite" />
                            <Setter Property="Visibility" Value="Visible" TargetName="path" />
                        </Trigger>

                        <!--<MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsFocused, RelativeSource={RelativeSource AncestorType={x:Type local:CardViewItem}}}" Value="False"/>
                                <Condition Property="IsFocused" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" Value="Yellow" TargetName="checkableborder"/>
                        </MultiDataTrigger>-->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ExpanderStyle" TargetType="{x:Type sync:ExpanderExt}">
        <Setter Property="TextElement.FontWeight" Value="Bold" />
        <Setter Property="Control.Height" Value="{Binding Path=Height, RelativeSource={RelativeSource AncestorType={x:Type sync:TaskBarItem}}}"/>
        <Setter Property="Control.Width" Value="{Binding Path=Width, RelativeSource={RelativeSource AncestorType={x:Type sync:TaskBarItem}}}"/>
        <Setter Property="Control.HorizontalContentAlignment" Value="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type sync:TaskBarItem}}}"/>
        <Setter Property="Control.VerticalContentAlignment" Value="{x:Static VerticalAlignment.Center}"/>
        <Setter Property="Border.BorderThickness" Value="1"/>
        <Setter	Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <Border Name="GeneralBorder" BorderBrush="{Binding Path=BorderBrush, RelativeSource={RelativeSource AncestorType={x:Type sync:TaskBarItem}}}"
				BorderThickness="{TemplateBinding Border.BorderThickness}" 
				Background="{Binding Path=Background, RelativeSource={RelativeSource AncestorType={x:Type sync:TaskBarItem}}}" CornerRadius="8"
				SnapsToDevicePixels="True" Padding="{TemplateBinding Control.Padding}">
                        <DockPanel>
                            <sync:ToggleButtonExt x:Name="HeaderSite1"
                              MinWidth="0" Margin="0" Style="{StaticResource ToggleButtonStyle}"
		   					  FontWeight="{TemplateBinding TextElement.FontWeight}" 
							  HorizontalContentAlignment="{TemplateBinding Control.HorizontalContentAlignment}" 
							  FontStretch="{TemplateBinding TextElement.FontStretch}" 
							  VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}" 
                                       Foreground="{TemplateBinding TextElement.Foreground}"
							  FontFamily="{TemplateBinding TextElement.FontFamily}"  
							  FontStyle="{TemplateBinding TextElement.FontStyle}" 
							  FontSize="{TemplateBinding TextElement.FontSize}" MinHeight="0" 
							  ContentTemplate="{TemplateBinding HeaderedContentControl.HeaderTemplate}" 
							  Padding="{TemplateBinding Control.Padding}" 
							  Content="{TemplateBinding HeaderedContentControl.Header}" DockPanel.Dock="Top"
							 
                TextElement.Foreground="{TemplateBinding Foreground}"							
                                         >
                                <ToggleButton.IsChecked>
                                    <Binding Mode="TwoWay" Path="IsExpanded" RelativeSource="{RelativeSource TemplatedParent}" 
								 NotifyOnSourceUpdated="False" BindsDirectlyToSource="False" IsAsync="False" 
								 NotifyOnValidationError="False" NotifyOnTargetUpdated="False"/>
                                </ToggleButton.IsChecked>
                            </sync:ToggleButtonExt>
                            <ContentPresenter x:Name="ExpandSite"
                                             Margin="{TemplateBinding Control.Padding}"
								  HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
								  VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" 
								  Focusable="False" ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
								  Content="{TemplateBinding ContentControl.Content}" DockPanel.Dock="Bottom" />
                        </DockPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded"
                                 Value="true">
                            <Setter Property="Visibility"
                                    Value="Visible"
                                    TargetName="ExpandSite"/>
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Opacity" Value="0.5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

    </Style>

    <Style TargetType="{x:Type sync:TaskBarItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type sync:TaskBarItem}">
                    <StackPanel Name="StackName">
                        <sync:ExpanderExt x:Name="ExpandTemplate" Style="{StaticResource ExpanderStyle}"
							  IsExpanded="{Binding Path=(sync:TaskBar.IsOpened), RelativeSource={RelativeSource AncestorType={x:Type sync:TaskBarItem}}}" HeaderTemplate="{Binding Path=ItemTemplate, RelativeSource={RelativeSource AncestorType={x:Type sync:TaskBar}}}"
							  Focusable="False" Header="{TemplateBinding Header}" ClipToBounds="True" ExpandDirection="Down" >

                            <ScrollViewer VerticalScrollBarVisibility="Auto">
                                <sync:TaskBarStackPanel  x:Name="PanelPresenter" ClipToBounds="True">
                                    <StackPanel Name="SimplePanel">
                                        <StackPanel.RenderTransform>
                                            <TranslateTransform />
                                        </StackPanel.RenderTransform>
                                        <sync:ItemsPresenterExt x:Name="ItemsPresenter" VerticalAlignment="Bottom" />
                                    </StackPanel>
                                </sync:TaskBarStackPanel>
                            </ScrollViewer>
                            <Expander.Triggers>
                                <EventTrigger RoutedEvent="Expander.Expanded">
                                    <EventTrigger.Actions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Storyboard.TargetName="ItemsPresenter" Storyboard.TargetProperty="Opacity"  To="1"
													AccelerationRatio="0.8" DecelerationRatio="0.2" >
                                                    <DoubleAnimation.Duration>
                                                        <MultiBinding Converter="{StaticResource SpeedToDurationConverter}" ConverterParameter="Expanded">
                                                            <Binding Path="(sync:TaskBar.Speed)" RelativeSource="{RelativeSource AncestorType={x:Type sync:TaskBarItem}}"/>
                                                            <Binding Path="DesiredSize.Height" ElementName="ItemsPresenter" />
                                                            <Binding Path= "SafeHeight" ElementName="PanelPresenter" />
                                                        </MultiBinding>
                                                    </DoubleAnimation.Duration>
                                                </DoubleAnimation>
                                                <DoubleAnimation Storyboard.TargetName="PanelPresenter" Storyboard.TargetProperty="(SafeHeight)" >
                                                    <DoubleAnimation.Duration>
                                                        <MultiBinding Converter="{StaticResource SpeedToDurationConverter}" ConverterParameter="Expanded">
                                                            <Binding Path="(sync:TaskBar.Speed)" RelativeSource="{RelativeSource AncestorType={x:Type sync:TaskBarItem}}"/>
                                                            <Binding Path="DesiredSize.Height" ElementName="ItemsPresenter" />
                                                            <Binding Path="SafeHeight" ElementName="PanelPresenter" />
                                                        </MultiBinding>
                                                    </DoubleAnimation.Duration>
                                                </DoubleAnimation>
                                                <DoubleAnimation Storyboard.TargetName="SimplePanel" Storyboard.TargetProperty="(StackPanel.RenderTransform).(TranslateTransform.Y)" 
												To="0">
                                                    <DoubleAnimation.Duration>
                                                        <MultiBinding Converter="{StaticResource SpeedToDurationConverter}" ConverterParameter="Expanded">
                                                            <Binding Path="(sync:TaskBar.Speed)" RelativeSource="{RelativeSource AncestorType={x:Type sync:TaskBarItem}}"/>
                                                            <Binding Path="DesiredSize.Height" ElementName="ItemsPresenter" />
                                                            <Binding Path="SafeHeight" ElementName="PanelPresenter" />
                                                        </MultiBinding>
                                                    </DoubleAnimation.Duration>
                                                </DoubleAnimation>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </EventTrigger.Actions>
                                </EventTrigger>
                                <EventTrigger RoutedEvent="Expander.Collapsed">
                                    <EventTrigger.Actions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Storyboard.TargetName="ItemsPresenter" Storyboard.TargetProperty="Opacity"  To="0" 
												AccelerationRatio="0.8" DecelerationRatio="0.2">
                                                    <DoubleAnimation.Duration>
                                                        <MultiBinding Converter="{StaticResource SpeedToDurationConverter}" ConverterParameter="Collapsed">
                                                            <Binding Path="(sync:TaskBar.Speed)" RelativeSource="{RelativeSource AncestorType={x:Type sync:TaskBarItem}}"/>
                                                            <Binding Path="SafeHeight" ElementName="PanelPresenter" />
                                                        </MultiBinding>
                                                    </DoubleAnimation.Duration>
                                                </DoubleAnimation>
                                                <DoubleAnimation Storyboard.TargetName="PanelPresenter" Storyboard.TargetProperty="(SafeHeight)" To="0">
                                                    <DoubleAnimation.Duration>
                                                        <MultiBinding Converter="{StaticResource SpeedToDurationConverter}" ConverterParameter="Collapsed">
                                                            <Binding Path="(sync:TaskBar.Speed)" RelativeSource="{RelativeSource AncestorType={x:Type sync:TaskBarItem}}"/>
                                                            <Binding Path="SafeHeight" ElementName="PanelPresenter" />
                                                        </MultiBinding>
                                                    </DoubleAnimation.Duration>
                                                </DoubleAnimation>
                                                <DoubleAnimation Storyboard.TargetName="SimplePanel" 
														 Storyboard.TargetProperty="(StackPanel.RenderTransform).(TranslateTransform.Y)" >
                                                    <DoubleAnimation.To>
                                                        <MultiBinding Converter="{StaticResource DoubleToNegativeDoubleConverter}">
                                                            <Binding Path="DesiredSize.Height" ElementName="ItemsPresenter" />
                                                            <Binding Path="(sync:TaskBar.GroupPadding)" RelativeSource="{RelativeSource AncestorType={x:Type sync:TaskBarItem}}" />
                                                        </MultiBinding>
                                                    </DoubleAnimation.To>
                                                    <DoubleAnimation.Duration>
                                                        <MultiBinding Converter="{StaticResource SpeedToDurationConverter}" ConverterParameter="Collapsed">
                                                            <Binding Path="(sync:TaskBar.Speed)" RelativeSource="{RelativeSource AncestorType={x:Type sync:TaskBarItem}}"/>
                                                            <Binding Path="SafeHeight" ElementName="PanelPresenter" />
                                                        </MultiBinding>
                                                    </DoubleAnimation.Duration>
                                                </DoubleAnimation>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </EventTrigger.Actions>
                                </EventTrigger>
                            </Expander.Triggers>
                        </sync:ExpanderExt>
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="{StaticResource TaskBarItemBackground}"/>
        <Setter Property="BorderBrush" Value="{StaticResource TaskBarItemBorderBrush}"/>
        <Setter Property="HeaderBackground" Value="{StaticResource TaskBarItemHeaderBackground}"/>
        <Setter Property="Foreground" Value="{StaticResource TaskBarItemHeaderForeground}"/>
    </Style>

    <Style x:Key="EditToggleButtonStyle" TargetType="{x:Type sync:ToggleButtonExt}">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type sync:ToggleButtonExt}">
                    <Border CornerRadius="8,8,0,0">
                        <Border.Background>
                            <LinearGradientBrush EndPoint="0.475,1.086" StartPoint="0.475,-0.086">
                                <GradientStop Color="#FFEBBB90" Offset="0.152"/>
                                <GradientStop Color="#FFDDA077" Offset="0.584"/>
                                <GradientStop Color="#FFD99466" Offset="0.592"/>
                            </LinearGradientBrush>
                        </Border.Background>
                        <sync:CheckableBorder Name="checkableborder" MinHeight="19" BorderThickness="0,0,0,1" BorderBrush="{Binding Path=BorderBrush, RelativeSource={RelativeSource AncestorType={x:Type sync:TaskBarItem}}}" 
                               Background="{Binding Path=HeaderBackground, RelativeSource={RelativeSource AncestorType={x:Type sync:TaskBarItem}}}" CornerRadius="8,8,0,0" Margin="1,1,1,0">
                            <Grid>
                                <Border Name="Layer" CornerRadius="8,8,0,0">
                                    <Border.OpacityMask>
                                        <LinearGradientBrush EndPoint="0.998,0.64" StartPoint="0.002,0.664">
                                            <GradientStop Color="#00000000" Offset="0"/>
                                            <GradientStop Color="#A9FFFFFF" Offset="0.616"/>
                                            <GradientStop Color="#D7FCFCFC" Offset="1"/>
                                        </LinearGradientBrush>
                                    </Border.OpacityMask>
                                    <Border.Background>
                                        <LinearGradientBrush EndPoint="0.65,0.952" StartPoint="0.65,0.04">
                                            <GradientStop Color="#FFF9C26D"/>
                                            <GradientStop Color="#FFEF8F00" Offset="0.556"/>
                                            <GradientStop Color="#FFF9C16D" Offset="0.549"/>
                                            <GradientStop Color="#FFF19100" Offset="1"/>
                                        </LinearGradientBrush>
                                    </Border.Background>
                                </Border>

                                <DockPanel>
                                    <Border Name="bord" DockPanel.Dock="Right" ClipToBounds="True" Margin="0,0,5,0"
							Width="{Binding Path=(sync:TaskBar.ButtonSize), RelativeSource={RelativeSource AncestorType={x:Type sync:TaskBarItem}}}" 
							Height="{Binding Path=(sync:TaskBar.ButtonSize), RelativeSource={RelativeSource AncestorType={x:Type sync:TaskBarItem}}}" 
							BorderThickness="0.7" BorderBrush="Transparent" >
                                        <!--<Path Name="path" Stretch="Fill" Data="F1 M 323.559,280.217L 393,236.422L 393,266L 471,266L 471,294L 393,294L 393,323.669L 323.559,280.217 Z " HorizontalAlignment="Left" Width="12.063" Height="10.464" VerticalAlignment="Top" Visibility="Collapsed">
                                            <Path.Stroke>
                                                <LinearGradientBrush EndPoint="0.144,0.447" StartPoint="0.986,0.447">
                                                    <GradientStop Color="#FF174D7C" Offset="0"/>
                                                    <GradientStop Color="#FF3986A8" Offset="1"/>
                                                </LinearGradientBrush>
                                            </Path.Stroke>
                                            <Path.Fill>
                                                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                                    <GradientStop Color="#FF8DD3EB" Offset="0"/>
                                                    <GradientStop Color="#FF2F84AD" Offset="1"/>
                                                </LinearGradientBrush>
                                            </Path.Fill>
                                        </Path>-->
                                    </Border>
                                    <ContentPresenter Name="ContentSite" Margin="0,2,0,2" HorizontalAlignment="Center" VerticalAlignment="Center"
								  ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}" RecognizesAccessKey="True" 
								  Content="{TemplateBinding ContentControl.Content}"   
				/>
                                </DockPanel>
                            </Grid>
                            <!--</Border>-->
                            <Border.Triggers>
                                <EventTrigger RoutedEvent="sync:CheckableBorder.Checked">
                                    <EventTrigger.Actions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Storyboard.TargetName="LittelButton"
									Storyboard.TargetProperty="(Border.RenderTransform).(RotateTransform.Angle)">
                                                    <DoubleAnimation.Duration>
                                                        <MultiBinding Converter="{StaticResource SpeedToDurationConverter}" ConverterParameter="Expanded">
                                                            <Binding Path="(sync:TaskBar.Speed)" RelativeSource="{RelativeSource AncestorType={x:Type sync:TaskBarItem}}"/>
                                                            <Binding Path="DesiredSize.Height" ElementName="ItemsPresenter" />
                                                            <Binding Path="SafeHeight" ElementName="PanelPresenter" />
                                                        </MultiBinding>
                                                    </DoubleAnimation.Duration>
                                                </DoubleAnimation>
                                                <!--<ColorAnimation Storyboard.TargetName="checkableborder" Storyboard.TargetProperty="Background" To="Green"/>-->
                                                <!--<ObjectAnimationUsingKeyFrames Storyboard.TargetName="checkableborder" Storyboard.TargetProperty="Background">
                                                    <DiscreteObjectKeyFrame KeyTime="0" Value="Red"/>
                                                </ObjectAnimationUsingKeyFrames>-->
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </EventTrigger.Actions>
                                </EventTrigger>
                                <EventTrigger RoutedEvent="sync:CheckableBorder.Unchecked">
                                    <EventTrigger.Actions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Storyboard.TargetName="LittelButton"
									Storyboard.TargetProperty="(Border.RenderTransform).(RotateTransform.Angle)" To="0">
                                                    <DoubleAnimation.Duration>
                                                        <MultiBinding Converter="{StaticResource SpeedToDurationConverter}" ConverterParameter="Collapsed">
                                                            <Binding Path="(sync:TaskBar.Speed)" RelativeSource="{RelativeSource AncestorType={x:Type sync:TaskBarItem}}"/>
                                                            <Binding Path="SafeHeight" ElementName="PanelPresenter" />
                                                        </MultiBinding>
                                                    </DoubleAnimation.Duration>
                                                </DoubleAnimation>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </EventTrigger.Actions>
                                </EventTrigger>
                            </Border.Triggers>
                        </sync:CheckableBorder>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsMouseOver" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation  Storyboard.TargetName="bord" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:.2" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="bord" Storyboard.TargetProperty="Opacity" Duration="0:0:.2" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                            <!--<Setter Property="Opacity" Value="1" TargetName="LittelButton"/>-->
                        </Trigger>

                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="Background" TargetName="checkableborder">
                                <Setter.Value>
                                    <LinearGradientBrush EndPoint="0.475,1.086" StartPoint="0.475,-0.086">
                                        <GradientStop Color="#FFDF8F47" Offset="0.069"/>
                                        <GradientStop Color="#FFC7641E" Offset="0.541"/>
                                        <GradientStop Color="#FFC04F00" Offset="0.549"/>
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Background" TargetName="Layer">
                                <Setter.Value>
                                    <LinearGradientBrush EndPoint="0.65,0.952" StartPoint="0.65,0.04">
                                        <GradientStop Color="#FFF9C26D"/>
                                        <GradientStop Color="#FFEF8F00" Offset="0.556"/>
                                        <GradientStop Color="#FFF9C16D" Offset="0.549"/>
                                        <GradientStop Color="#FFF19100" Offset="1"/>
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="OpacityMask" TargetName="Layer">
                                <Setter.Value>
                                    <LinearGradientBrush EndPoint="0.998,0.64" StartPoint="0.002,0.664">
                                        <GradientStop Color="#B8000000" Offset="0.254"/>
                                        <GradientStop Color="White" Offset="0.487"/>
                                        <GradientStop Color="#B7FCFCFC" Offset="0.733"/>
                                        <GradientStop Color="#00FCFCFC" Offset="0.983"/>
                                        <GradientStop Color="#00000000" Offset="0"/>
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="TextElement.Foreground" Value="Black" TargetName="ContentSite" />
                            <!--<Setter Property="Visibility" Value="Visible" TargetName="path" />-->
                        </Trigger>

                        <!--<MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsFocused, RelativeSource={RelativeSource AncestorType={x:Type local:CardViewItem}}}" Value="False"/>
                                <Condition Property="IsFocused" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" Value="Yellow" TargetName="checkableborder"/>
                        </MultiDataTrigger>-->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="EditExpanderStyle" TargetType="{x:Type sync:ExpanderExt}">
        <Setter Property="TextElement.FontWeight" Value="Bold" />
        <Setter Property="Control.Height" Value="{Binding Path=Height, RelativeSource={RelativeSource AncestorType={x:Type sync:TaskBarItem}}}"/>
        <Setter Property="Control.Width" Value="{Binding Path=Width, RelativeSource={RelativeSource AncestorType={x:Type sync:TaskBarItem}}}"/>
        <Setter Property="Control.HorizontalContentAlignment" Value="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type sync:TaskBarItem}}}"/>
        <Setter Property="Control.VerticalContentAlignment" Value="{x:Static VerticalAlignment.Center}"/>
        <Setter Property="Border.BorderThickness" Value="1"/>
        <Setter	Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <Border Name="GeneralBorder" BorderBrush="{Binding Path=BorderBrush, RelativeSource={RelativeSource AncestorType={x:Type sync:TaskBarItem}}}"
				BorderThickness="{TemplateBinding Border.BorderThickness}" 
				Background="{Binding Path=Background, RelativeSource={RelativeSource AncestorType={x:Type sync:TaskBarItem}}}" CornerRadius="8"
				SnapsToDevicePixels="True" Padding="{TemplateBinding Control.Padding}">
                        <DockPanel>
                            <sync:ToggleButtonExt x:Name="HeaderSite1"
                              MinWidth="0" Margin="0" Style="{StaticResource EditToggleButtonStyle}"
		   					  FontWeight="{TemplateBinding TextElement.FontWeight}" 
							  HorizontalContentAlignment="{TemplateBinding Control.HorizontalContentAlignment}" 
							  FontStretch="{TemplateBinding TextElement.FontStretch}" 
							  VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}" 
                                       Foreground="{TemplateBinding TextElement.Foreground}"
							  FontFamily="{TemplateBinding TextElement.FontFamily}"  
							  FontStyle="{TemplateBinding TextElement.FontStyle}" 
							  FontSize="{TemplateBinding TextElement.FontSize}" MinHeight="0" 
							  ContentTemplate="{TemplateBinding HeaderedContentControl.HeaderTemplate}" 
							  Padding="{TemplateBinding Control.Padding}" 
							  Content="{TemplateBinding HeaderedContentControl.Header}" DockPanel.Dock="Top"
							 
                TextElement.Foreground="{TemplateBinding Foreground}"							
                                         >
                                <ToggleButton.IsChecked>
                                    <Binding Mode="TwoWay" Path="IsExpanded" RelativeSource="{RelativeSource TemplatedParent}" 
								 NotifyOnSourceUpdated="False" BindsDirectlyToSource="False" IsAsync="False" 
								 NotifyOnValidationError="False" NotifyOnTargetUpdated="False"/>
                                </ToggleButton.IsChecked>
                            </sync:ToggleButtonExt>
                            <ContentPresenter x:Name="ExpandSite"
                                             Margin="{TemplateBinding Control.Padding}"
								  HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
								  VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" 
								  Focusable="False" ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
								  Content="{TemplateBinding ContentControl.Content}" DockPanel.Dock="Bottom" />
                        </DockPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded"
                                 Value="true">
                            <Setter Property="Visibility"
                                    Value="Visible"
                                    TargetName="ExpandSite"/>
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Opacity" Value="0.5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

    </Style>

    <Style x:Key="EditTaskBarItemStyle" TargetType="{x:Type sync:TaskBarItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type sync:TaskBarItem}">
                    <StackPanel Name="StackName">

                        <sync:ExpanderExt x:Name="ExpandTemplate" Style="{StaticResource EditExpanderStyle}"
							  IsExpanded="{Binding Path=(sync:TaskBar.IsOpened), RelativeSource={RelativeSource AncestorType={x:Type sync:TaskBarItem}}}" HeaderTemplate="{Binding Path=ItemTemplate, RelativeSource={RelativeSource AncestorType={x:Type sync:TaskBar}}}"
							  Focusable="False" Header="{TemplateBinding Header}" ClipToBounds="True" ExpandDirection="Down" >

                            <ScrollViewer VerticalScrollBarVisibility="Auto">
                                <sync:TaskBarStackPanel  x:Name="PanelPresenter" ClipToBounds="True">
                                    <StackPanel Name="SimplePanel">
                                        <StackPanel.RenderTransform>
                                            <TranslateTransform />
                                        </StackPanel.RenderTransform>
                                        <sync:ItemsPresenterExt x:Name="ItemsPresenter" VerticalAlignment="Bottom" />
                                    </StackPanel>
                                </sync:TaskBarStackPanel>
                            </ScrollViewer>

                            <Expander.Triggers>
                                <EventTrigger RoutedEvent="Expander.Expanded">
                                    <EventTrigger.Actions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Storyboard.TargetName="ItemsPresenter" Storyboard.TargetProperty="Opacity"  To="1"
													AccelerationRatio="0.8" DecelerationRatio="0.2" >
                                                    <DoubleAnimation.Duration>
                                                        <MultiBinding Converter="{StaticResource SpeedToDurationConverter}" ConverterParameter="Expanded">
                                                            <Binding Path="(sync:TaskBar.Speed)" RelativeSource="{RelativeSource AncestorType={x:Type sync:TaskBarItem}}"/>
                                                            <Binding Path="DesiredSize.Height" ElementName="ItemsPresenter" />
                                                            <Binding Path= "SafeHeight" ElementName="PanelPresenter" />
                                                        </MultiBinding>
                                                    </DoubleAnimation.Duration>
                                                </DoubleAnimation>
                                                <DoubleAnimation Storyboard.TargetName="PanelPresenter" Storyboard.TargetProperty="(SafeHeight)" >
                                                    <DoubleAnimation.Duration>
                                                        <MultiBinding Converter="{StaticResource SpeedToDurationConverter}" ConverterParameter="Expanded">
                                                            <Binding Path="(sync:TaskBar.Speed)" RelativeSource="{RelativeSource AncestorType={x:Type sync:TaskBarItem}}"/>
                                                            <Binding Path="DesiredSize.Height" ElementName="ItemsPresenter" />
                                                            <Binding Path="SafeHeight" ElementName="PanelPresenter" />
                                                        </MultiBinding>
                                                    </DoubleAnimation.Duration>
                                                </DoubleAnimation>
                                                <DoubleAnimation Storyboard.TargetName="SimplePanel" Storyboard.TargetProperty="(StackPanel.RenderTransform).(TranslateTransform.Y)" 
												To="0">
                                                    <DoubleAnimation.Duration>
                                                        <MultiBinding Converter="{StaticResource SpeedToDurationConverter}" ConverterParameter="Expanded">
                                                            <Binding Path="(sync:TaskBar.Speed)" RelativeSource="{RelativeSource AncestorType={x:Type sync:TaskBarItem}}"/>
                                                            <Binding Path="DesiredSize.Height" ElementName="ItemsPresenter" />
                                                            <Binding Path="SafeHeight" ElementName="PanelPresenter" />
                                                        </MultiBinding>
                                                    </DoubleAnimation.Duration>
                                                </DoubleAnimation>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </EventTrigger.Actions>
                                </EventTrigger>
                                <EventTrigger RoutedEvent="Expander.Collapsed">
                                    <EventTrigger.Actions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Storyboard.TargetName="ItemsPresenter" Storyboard.TargetProperty="Opacity"  To="0" 
												AccelerationRatio="0.8" DecelerationRatio="0.2">
                                                    <DoubleAnimation.Duration>
                                                        <MultiBinding Converter="{StaticResource SpeedToDurationConverter}" ConverterParameter="Collapsed">
                                                            <Binding Path="(sync:TaskBar.Speed)" RelativeSource="{RelativeSource AncestorType={x:Type sync:TaskBarItem}}"/>
                                                            <Binding Path="SafeHeight" ElementName="PanelPresenter" />
                                                        </MultiBinding>
                                                    </DoubleAnimation.Duration>
                                                </DoubleAnimation>
                                                <DoubleAnimation Storyboard.TargetName="PanelPresenter" Storyboard.TargetProperty="(SafeHeight)" To="0">
                                                    <DoubleAnimation.Duration>
                                                        <MultiBinding Converter="{StaticResource SpeedToDurationConverter}" ConverterParameter="Collapsed">
                                                            <Binding Path="(sync:TaskBar.Speed)" RelativeSource="{RelativeSource AncestorType={x:Type sync:TaskBarItem}}"/>
                                                            <Binding Path="SafeHeight" ElementName="PanelPresenter" />
                                                        </MultiBinding>
                                                    </DoubleAnimation.Duration>
                                                </DoubleAnimation>
                                                <DoubleAnimation Storyboard.TargetName="SimplePanel" 
														 Storyboard.TargetProperty="(StackPanel.RenderTransform).(TranslateTransform.Y)" >
                                                    <DoubleAnimation.To>
                                                        <MultiBinding Converter="{StaticResource DoubleToNegativeDoubleConverter}">
                                                            <Binding Path="DesiredSize.Height" ElementName="ItemsPresenter" />
                                                            <Binding Path="(sync:TaskBar.GroupPadding)" RelativeSource="{RelativeSource AncestorType={x:Type sync:TaskBarItem}}" />
                                                        </MultiBinding>
                                                    </DoubleAnimation.To>
                                                    <DoubleAnimation.Duration>
                                                        <MultiBinding Converter="{StaticResource SpeedToDurationConverter}" ConverterParameter="Collapsed">
                                                            <Binding Path="(sync:TaskBar.Speed)" RelativeSource="{RelativeSource AncestorType={x:Type sync:TaskBarItem}}"/>
                                                            <Binding Path="SafeHeight" ElementName="PanelPresenter" />
                                                        </MultiBinding>
                                                    </DoubleAnimation.Duration>
                                                </DoubleAnimation>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </EventTrigger.Actions>
                                </EventTrigger>
                            </Expander.Triggers>

                        </sync:ExpanderExt>
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="{StaticResource TaskBarItemBackground}"/>
        <Setter Property="BorderBrush" Value="{StaticResource TaskBarItemBorderBrush}"/>
        <Setter Property="HeaderBackground" Value="{StaticResource TaskBarItemHeaderBackground}"/>
        <Setter Property="Foreground" Value="{StaticResource TaskBarItemHeaderForeground}"/>
    </Style>

    <Style x:Key="ClearFilterButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}"/>
        <Setter Property="Background" Value="{StaticResource ButtonNormalBackground}"/>
        <Setter Property="BorderBrush" Value="{StaticResource ButtonNormalBorder}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid x:Name="Chrome" SnapsToDevicePixels="true" >
                        <Path x:Name="path" Stretch="Uniform"  Fill="#FF979797" Data="F1 M 491.125,285.875C 491.125,288.636 488.887,290.875 486.125,290.875L 297.875,290.875C 295.113,290.875 292.875,288.636 292.875,285.875L 292.875,274.125C 292.875,271.364 295.113,269.125 297.875,269.125L 486.125,269.125C 488.887,269.125 491.125,271.364 491.125,274.125L 491.125,285.875 Z " Height="18.597" VerticalAlignment="Top"/>
                        <Path x:Name="path1" Stretch="Uniform" Fill="#FF4D4D4D" Data="F1 M 490.333,273C 488.507,275 470.751,279.319 458,281.172C 440.875,283.659 395.995,283.468 368.666,281.667C 343.376,280 293,286 293,286L 292.875,285.187L 292.875,285.875C 292.875,288.636 295.113,290.875 297.875,290.875L 486.125,290.875C 488.887,290.875 491.125,288.636 491.125,285.875L 491.125,274.125C 491.125,273.471 490.991,272.851 490.763,272.279C 490.607,272.607 490.462,272.859 490.333,273 Z " Height="18.003" VerticalAlignment="Top"/>
                        <!--<Path x:Name="path" Stretch="Fill" Fill="#FF979797" Data="F1 M 491.125,285.875C 491.125,288.636 488.887,290.875 486.125,290.875L 297.875,290.875C 295.113,290.875 292.875,288.636 292.875,285.875L 292.875,274.125C 292.875,271.364 295.113,269.125 297.875,269.125L 486.125,269.125C 488.887,269.125 491.125,271.364 491.125,274.125L 491.125,285.875 Z " VerticalAlignment="Top" HorizontalAlignment="Stretch" Width="100"/>
                        <Path x:Name="path1" Margin="0,2,0,0" Stretch="Fill" Fill="#FF4D4D4D" Data="F1 M 490.333,273C 488.507,275 470.751,279.319 458,281.172C 440.875,283.659 395.995,283.468 368.666,281.667C 343.376,280 293,286 293,286L 292.875,285.187L 292.875,285.875C 292.875,288.636 295.113,290.875 297.875,290.875L 486.125,290.875C 488.887,290.875 491.125,288.636 491.125,285.875L 491.125,274.125C 491.125,273.471 490.991,272.851 490.763,272.279C 490.607,272.607 490.462,272.859 490.333,273 Z " VerticalAlignment="Top" Width="100"/>-->
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="Fill" TargetName="path">
                                <Setter.Value>
                                    <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                        <GradientStop Color="#FFFAD68A" Offset="0.029"/>
                                        <GradientStop Color="#FFEEB36E" Offset="0.486"/>
                                        <GradientStop Color="#FFF2BD76" Offset="0.971"/>
                                        <GradientStop Color="#FFF0B25A" Offset="1"/>
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Fill" TargetName="path1">
                                <Setter.Value>
                                    <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                        <GradientStop Color="#FFE17A03" Offset="0.086"/>
                                        <GradientStop Color="#FFF3AE2C" Offset="0.971"/>
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type sync:CheckListBox}">
        <Setter Property="BorderThickness" Value="0.5"/>
        <Setter Property="BorderBrush" Value="Black"/>
        <Setter Property="Background" Value="#FF434343"/>
        <Setter Property="Foreground" Value="#FFD2D2D2"/>
        <Setter Property="Padding" Value="2"/>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="Once"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type sync:CheckListBox}">
                    <Grid Background="{TemplateBinding Background}">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>
                        <Button Grid.Row="0" Style="{StaticResource ClearFilterButtonStyle}" Content="Clear Filter" Width="Auto"/>
                        <Border Grid.Row="1" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                            <ScrollViewer HorizontalScrollBarVisibility="Auto" Padding="{TemplateBinding Padding}" VerticalScrollBarVisibility="Auto">
                                <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </ScrollViewer>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type sync:CheckListBoxItem}">
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="sync:CheckListBox.CheckBoxAlignment" Value="Left"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type sync:CheckListBoxItem}">
                    <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition x:Name="firstColumn" Width="Auto"/>
                                <ColumnDefinition x:Name="secondColumn" Width="*"/>
                            </Grid.ColumnDefinitions>
                            <CheckBox x:Name="PART_CheckBox" Focusable="False" IsChecked="{Binding IsSelected, RelativeSource={RelativeSource TemplatedParent}}" Margin="1,1,5,1" VerticalAlignment="Center"/>
                            <Border x:Name="contentBd" Grid.Column="1">
                                <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" ContentSource="Content" Margin="3"/>
                            </Border>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding (sync:CheckListBox.CheckBoxAlignment), RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type sync:CheckListBox}}}" Value="Right">
                            <Setter Property="Grid.Column" TargetName="PART_CheckBox" Value="1"/>
                            <Setter Property="Grid.Column" TargetName="contentBd" Value="0"/>
                            <Setter Property="Width" TargetName="firstColumn" Value="*"/>
                            <Setter Property="Width" TargetName="secondColumn" Value="Auto"/>
                            <Setter Property="Margin" TargetName="PART_CheckBox" Value="5,1,1,1"/>
                        </DataTrigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="Foreground" Value="White"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground" Value="White"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--<ControlTemplate TargetType="{x:Type local:CardViewItem}" x:Key="EditTemplate">
        <Grid Name="StackName">
            <Border>
                <sync:TaskBarItem Header="{TemplateBinding Header}"
                                          HeaderTemplate="{Binding Path=HeaderTemplate, RelativeSource={RelativeSource AncestorType={x:Type local:CardView}}}">
                    <Grid >
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <propertygrid:PropertyGrid x:Name="PART_DataForm" SelectedObject="{Binding}"/>
                    </Grid>
                </sync:TaskBarItem>-->
                <!--<Image Source="icon.png" HorizontalAlignment="Right" VerticalAlignment="Top" Height="30" Width="30"/>-->
            <!--</Border>

        </Grid>
    </ControlTemplate>-->

    <Style TargetType="{x:Type sync:CardViewItem}">
        <Setter Property="Margin" Value="5"/>
        <Setter Property="Width" Value="200"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type sync:CardViewItem}">
                    <Grid Name="StackName">
                        <Border>
                            <sync:TaskBarItem Header="{TemplateBinding Header}" 
                                          HeaderTemplate="{Binding HeaderTemplate, RelativeSource={RelativeSource AncestorType={x:Type sync:CardView}}}">
                                <ContentPresenter Content="{TemplateBinding Content}" 
                                              ContentTemplate="{Binding ItemTemplate, RelativeSource={RelativeSource AncestorType={x:Type sync:CardView}}}"/>
                            </sync:TaskBarItem>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
       
    </Style>



   

    <!--<ControlTemplate TargetType="{x:Type GroupItem}" x:Key="GroupStyle1">
        <Expander x:Name="PART_Expander" IsExpanded="True" HorizontalAlignment="Stretch">
            <Expander.Header>
                <StackPanel>
                    <TextBlock Text="{Binding Name}"/>
                </StackPanel>
            </Expander.Header>
            <Expander.Content>
                <local:CardGroupControl ItemsSource="{Binding Items}" ItemsPanel="{Binding ItemsPanel, RelativeSource={RelativeSource AncestorType={x:Type local:CardView}}}"
                                                            ItemContainerStyle="{Binding ItemContainerStyle, RelativeSource={RelativeSource AncestorType={x:Type local:CardView}}}">
                </local:CardGroupControl>
            </Expander.Content>
        </Expander>
    </ControlTemplate>

    <GroupStyle x:Key="GroupStyle">
        <GroupStyle.ContainerStyle>
            <Style TargetType="{x:Type GroupItem}">
                <Setter Property="Margin" Value="5"/>
                <Setter Property="Template" Value="{StaticResource GroupStyle1}"/>
            </Style>
        </GroupStyle.ContainerStyle>
        <GroupStyle.Panel>
            <ItemsPanelTemplate>
                <local:CardViewPanel Orientation="Vertical" />
            </ItemsPanelTemplate>
        </GroupStyle.Panel>
    </GroupStyle>-->

    <LinearGradientBrush x:Key="CardViewBackground" EndPoint="0.5,1" StartPoint="0.5,0">
        <GradientStop Color="#FF5C5A5A" Offset="0.451"/>
        <GradientStop Color="#FF696666" Offset="0.988"/>
    </LinearGradientBrush>

    <SolidColorBrush x:Key="CardViewBorderBrush" Color="#FF000000"/>

    <LinearGradientBrush x:Key="DragDropBackground" EndPoint="0.5,1" StartPoint="0.5,0">
        <GradientStop Color="#FFC5C5C4" Offset="0.094"/>
        <GradientStop Color="#FF989697" Offset="0.991"/>
    </LinearGradientBrush>

    <SolidColorBrush x:Key="DragDropForeground" Color="#FF000000"/>

    <Style TargetType="{x:Type sync:CardView}" >
        <Setter Property="Background" Value="{StaticResource CardViewBackground}"/>
        <Setter Property="BorderBrush" Value="{StaticResource CardViewBorderBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="NewItemStyle" Value="{StaticResource NewItemStyle}"/>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <sync:CardViewPanel Orientation="Vertical" />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type sync:CardView}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="*"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>                            
                            <Border Height="50" Background="{StaticResource DragDropBackground}" Visibility="{Binding Path=ShowHeader, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Converter}}">
                                <Grid AllowDrop="True" x:Name="GroupPanel">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition Width="*"/>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition Width="Auto"/>
                                    </Grid.ColumnDefinitions>
                                    <TextBlock Name="text" HorizontalAlignment="Center" Grid.Column="1" VerticalAlignment="Center" Text="Drag a column header here to group by that column" Foreground="{StaticResource DragDropForeground}"/>
                                    <ListBox x:Name="GroupBox"  Grid.ColumnSpan="2" ItemsSource="{TemplateBinding GroupboxCollection}">
                                        <ItemsControl.ItemTemplate>
                                            <DataTemplate>
                                                <StackPanel Orientation="Horizontal">
                                                    <Border Width="4" Height="10" Background="Black" VerticalAlignment="Top" Visibility="{Binding CanInsert, Converter={StaticResource Converter}}"/>
                                                    <ToggleButton Content="{Binding Name}"  Command="{Binding Sort, RelativeSource={RelativeSource AncestorType={x:Type sync:CardView}}}" CommandParameter="{Binding IsChecked, RelativeSource={RelativeSource Self}}" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="3">
                                                    </ToggleButton>
                                                    <Border Width="4" Height="10" Background="Black" VerticalAlignment="Top" Visibility="{Binding CanInsertAfterThis, Converter={StaticResource Converter}}"/>
                                                </StackPanel>
                                            </DataTemplate>
                                        </ItemsControl.ItemTemplate>
                                        <ListBox.ItemContainerStyle>
                                            <Style TargetType="ListBoxItem">
                                                <Setter Property="Template">
                                                    <Setter.Value>
                                                        <ControlTemplate TargetType="ListBoxItem">
                                                            <ContentPresenter/>
                                                        </ControlTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                            </Style>
                                        </ListBox.ItemContainerStyle>
                                        <ListBox.ItemsPanel>
                                            <ItemsPanelTemplate>
                                                <StackPanel Orientation="Horizontal"/>
                                            </ItemsPanelTemplate>
                                        </ListBox.ItemsPanel>
                                    </ListBox>

                                    <ListBox Grid.Column="2" ItemsSource="{TemplateBinding GroupNames}" x:Name="Group" Style="{StaticResource ListBoxStyle}" ItemContainerStyle="{StaticResource ListBoxItemStyle}">
                                        <ListBox.ItemTemplate>
                                            <DataTemplate>
                                                <Grid>
                                                    <Grid.ColumnDefinitions>
                                                        <ColumnDefinition Width="20"/>
                                                        <ColumnDefinition Width="Auto"/>
                                                        <ColumnDefinition Width="*"/>
                                                    </Grid.ColumnDefinitions>

                                                    <Border Grid.Column="1" Background="White" BorderBrush="White" BorderThickness="0.5"/>
                                                    <ToggleButton Grid.Column="2" x:Name="PART_Sort" Margin="-2,0,0,0" HorizontalAlignment="Stretch" 
                                                                  Command="{Binding NormalSort, RelativeSource={RelativeSource AncestorType={x:Type sync:CardView}}}" 
                                                                  CommandParameter="{Binding IsChecked, RelativeSource={RelativeSource Self}}" 
                                                                  Background="Transparent" BorderBrush="Transparent" Style="{StaticResource SortingToggleButtonStyle}">
                                                        <StackPanel Orientation="Horizontal">
                                                            <TextBlock Text="{Binding Name}" Margin="1"/>
                                                            <Grid Margin="2 1 -1 1" >
                                                                <Path Visibility="{Binding SortDirection, Converter={StaticResource VisibilityConverter}}" Data="M0,0L3.5,4 7,0z" 
                                                                      HorizontalAlignment="Center" Height="5" Width="8" Stretch="Fill" Fill="White"  VerticalAlignment="Center" 
                                                                      RenderTransformOrigin="0.5,0.5">
                                                                    <Path.RenderTransform>
                                                                        <RotateTransform Angle="{Binding SortDirection, Converter={StaticResource AngleConverter}}"/>
                                                                    </Path.RenderTransform>
                                                                </Path>
                                                               
                                                            </Grid>
                                                        </StackPanel>
                                                    </ToggleButton>
                                                </Grid>
                                                <DataTemplate.Triggers>
                                                   
                                                        <Trigger Property="IsMouseOver" SourceName="PART_Sort" Value="True">
                                                        <Setter TargetName="PART_Sort" Property="Background" Value="{StaticResource ListBoxItemHoverBrush}"/>
                                                    </Trigger>

                                                    <Trigger Property="IsFocused" SourceName="PART_Sort" Value="True">
                                                        <Setter TargetName="PART_Sort" Property="Background" Value="{StaticResource ListBoxItemSelectedBrush}"/>
                                                    </Trigger>
                                                </DataTemplate.Triggers>
                                            </DataTemplate>
                                        </ListBox.ItemTemplate>
                                    </ListBox>
                                </Grid>
                            </Border>                            
                            <ScrollViewer VerticalScrollBarVisibility="Disabled"  Grid.Row="1" HorizontalScrollBarVisibility="Auto">
                                <Grid>
                                                     
                                    <ItemsPresenter x:Name="PART_Host">
                                    </ItemsPresenter>                                    
                                </Grid>
                            </ScrollViewer>                            
                        </Grid>                        
                    </Border>                   
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasItems" SourceName="GroupBox" Value="True">
                            <Setter Property="Visibility" Value="Collapsed" TargetName="text"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

    </Style>


</ResourceDictionary>
