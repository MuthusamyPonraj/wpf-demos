<Window x:Class="GettingStarted_Events.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:GettingStarted_Events"
        xmlns:Syncfusion="http://schemas.syncfusion.com/wpf" 
        xmlns:Stencil="clr-namespace:Syncfusion.UI.Xaml.Diagram.Stencil;assembly=Syncfusion.SfDiagram.Wpf"
        xmlns:ViewModel="clr-namespace:GettingStarted_Events.ViewModel"
        mc:Ignorable="d"
        Title="Events" WindowState="Maximized">
    <Window.DataContext>
        <ViewModel:EventDiagramVM x:Name="DiagramVM"></ViewModel:EventDiagramVM>
    </Window.DataContext>

    <Window.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <!--Dictionary which contains the inbuilt shapes-->
                <ResourceDictionary Source="/Syncfusion.SfDiagram.Wpf;component/Resources/BasicShapes.xaml" />
            </ResourceDictionary.MergedDictionaries>

            <!--Control colors.-->
            <Color x:Key="WindowColor">#FFE8EDF9</Color>
            <Color x:Key="ContentAreaColorLight">#FFC5CBF9</Color>
            <Color x:Key="ContentAreaColorDark">White</Color>

            <Color x:Key="DisabledControlLightColor">#FFE8EDF9</Color>
            <Color x:Key="DisabledControlDarkColor">#FFC5CBF9</Color>
            <Color x:Key="DisabledForegroundColor">#FF888888</Color>

            <Color x:Key="SelectedBackgroundColor">#FFC5CBF9</Color>
            <Color x:Key="SelectedUnfocusedColor">#FFDDDDDD</Color>

            <Color x:Key="ControlLightColor">White</Color>
            <Color x:Key="ControlMediumColor">White</Color>
            <Color x:Key="ControlDarkColor">#FF211AA9</Color>

            <Color x:Key="ControlMouseOverColor">White</Color>
            <Color x:Key="ControlPressedColor">White</Color>


            <Color x:Key="GlyphColor">#FF444444</Color>
            <Color x:Key="GlyphMouseOver">sc#1, 0.004391443, 0.002428215, 0.242281124</Color>

            <!--Border colors-->
            <Color x:Key="BorderLightColor">White</Color>
            <Color x:Key="BorderMediumColor">White</Color>
            <Color x:Key="BorderDarkColor">White</Color>

            <Color x:Key="PressedBorderLightColor">#FF888888</Color>
            <Color x:Key="PressedBorderDarkColor">#FF444444</Color>

            <Color x:Key="DisabledBorderLightColor">#FFAAAAAA</Color>
            <Color x:Key="DisabledBorderDarkColor">#FF888888</Color>

            <Color x:Key="DefaultBorderBrushDarkColor">Black</Color>

            <!--Control-specific resources.-->
            <Color x:Key="HeaderTopColor">#FFC5CBF9</Color>
            <Color x:Key="DatagridCurrentCellBorderColor">Black</Color>
            <Color x:Key="SliderTrackDarkColor">#FFC5CBF9</Color>

            <Color x:Key="NavButtonFrameColor">#FF3843C4</Color>

            <LinearGradientBrush x:Key="MenuPopupBrush"
                     EndPoint="0.5,1"
                     StartPoint="0.5,0">
                <GradientStop Color="{DynamicResource ControlLightColor}"
                Offset="0" />
                <GradientStop Color="{DynamicResource ControlMediumColor}"
                Offset="0.5" />
                <GradientStop Color="{DynamicResource ControlLightColor}"
                Offset="1" />
            </LinearGradientBrush>

            <LinearGradientBrush x:Key="ProgressBarIndicatorAnimatedFill"
                     StartPoint="0,0"
                     EndPoint="1,0">
                <LinearGradientBrush.GradientStops>
                    <GradientStopCollection>
                        <GradientStop Color="#000000FF"
                    Offset="0" />
                        <GradientStop Color="#600000FF"
                    Offset="0.4" />
                        <GradientStop Color="#600000FF"
                    Offset="0.6" />
                        <GradientStop Color="#000000FF"
                    Offset="1" />
                    </GradientStopCollection>
                </LinearGradientBrush.GradientStops>
            </LinearGradientBrush>

            <!--Style for Node-->
            <Style TargetType="Syncfusion:Node">
                <Setter Property="ShapeStyle">
                    <Setter.Value>
                        <Style  TargetType="Path">
                            <Setter Property="Fill" Value="White"/>
                            <Setter Property="Stroke" Value="#727272"/>
                            <Setter Property="Stretch" Value="Fill"/>
                        </Style>
                    </Setter.Value>
                </Setter>
            </Style>

            <!--Style for Symbol-->
            <Style TargetType="Stencil:Symbol">
                <Setter Property="Width" Value="50"/>
                <Setter Property="Height" Value="50"/>
                <Setter Property="Padding" Value="3" />
                <Setter Property="BorderThickness" Value="1" />
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="BorderBrush" Value="Transparent" />
                <Setter Property="Margin" Value="4"></Setter>
            </Style>

            <!--Style for Symbol Group-->
            <Style TargetType="Stencil:SymbolGroup">
                <Setter Property="FontFamily" Value="Regular"/>
                <Setter Property="Background" Value="#ffffff"/>
                <Setter Property="Foreground" Value="#222222"/>
                <Setter Property="FontSize" Value="14"/>
                <Setter Property="HeaderTemplate">
                    <Setter.Value>
                        <DataTemplate>
                            <Stencil:Header>
                                <Stencil:Header.Template>
                                    <ControlTemplate TargetType="Stencil:Header">
                                        <Grid>
                                            <Border x:Name="header" 
                                                    Background="#f5f5f5" 
                                                    BorderBrush="#dfdfdf" 
                                                    BorderThickness="1">
                                                <ContentPresenter Margin="10" Content="{Binding}"/>
                                            </Border>
                                        </Grid>
                                    </ControlTemplate>
                                </Stencil:Header.Template>
                            </Stencil:Header>
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!--Control Template for Expander Toggle Button-->
            
            <ControlTemplate x:Key="ExpanderToggleButton"
                 TargetType="{x:Type ToggleButton}">
                <Border x:Name="Border"
          CornerRadius="2,0,0,0"
          BorderThickness="0,0,1,0">
                    <Border.Background>
                        <LinearGradientBrush EndPoint="0.5,1"
                           StartPoint="0.5,0">
                            <GradientStop Color="{DynamicResource ControlLightColor}" />
                            <GradientStop Color="{DynamicResource ControlMediumColor}"
                      Offset="1" />
                        </LinearGradientBrush>
                    </Border.Background>
                    <Border.BorderBrush>
                        <LinearGradientBrush StartPoint="0,0"
                           EndPoint="0,1">
                            <LinearGradientBrush.GradientStops>
                                <GradientStopCollection>
                                    <GradientStop Color="{DynamicResource BorderLightColor}"
                          Offset="0.0" />
                                    <GradientStop Color="{DynamicResource BorderDarkColor}"
                          Offset="1.0" />
                                </GradientStopCollection>
                            </LinearGradientBrush.GradientStops>
                        </LinearGradientBrush>

                    </Border.BorderBrush>
                    <VisualStateManager.VisualStateGroups>
                        <VisualStateGroup x:Name="CommonStates">
                            <VisualState x:Name="Normal" />
                            <VisualState x:Name="MouseOver">
                                <Storyboard>
                                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                          Storyboard.TargetProperty="(Panel.Background).
                (GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                        <EasingColorKeyFrame KeyTime="0"
                                   Value="{StaticResource ControlMouseOverColor}" />
                                    </ColorAnimationUsingKeyFrames>
                                </Storyboard>
                            </VisualState>
                            <VisualState x:Name="Pressed">
                                <Storyboard>
                                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                          Storyboard.TargetProperty="(Panel.Background).
                (GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                        <EasingColorKeyFrame KeyTime="0"
                                   Value="{StaticResource ControlPressedColor}" />
                                    </ColorAnimationUsingKeyFrames>
                                </Storyboard>
                            </VisualState>
                            <VisualState x:Name="Disabled">
                                <Storyboard>
                                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                          Storyboard.TargetProperty="(Panel.Background).
                (GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                        <EasingColorKeyFrame KeyTime="0"
                                   Value="{StaticResource DisabledControlDarkColor}" />
                                    </ColorAnimationUsingKeyFrames>
                                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                          Storyboard.TargetProperty="(Border.BorderBrush).
                (GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                        <EasingColorKeyFrame KeyTime="0"
                                   Value="{StaticResource DisabledBorderLightColor}" />
                                    </ColorAnimationUsingKeyFrames>
                                </Storyboard>
                            </VisualState>
                        </VisualStateGroup>
                        <VisualStateGroup x:Name="CheckStates">
                            <VisualState x:Name="Checked">
                                <Storyboard>
                                    <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)"
                                           Storyboard.TargetName="CollapsedArrow">
                                        <DiscreteObjectKeyFrame KeyTime="0"
                                      Value="{x:Static Visibility.Hidden}" />
                                    </ObjectAnimationUsingKeyFrames>
                                    <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)"
                                           Storyboard.TargetName="ExpandededArrow">
                                        <DiscreteObjectKeyFrame KeyTime="0"
                                      Value="{x:Static Visibility.Visible}" />
                                    </ObjectAnimationUsingKeyFrames>
                                </Storyboard>
                            </VisualState>
                            <VisualState x:Name="Unchecked" />
                            <VisualState x:Name="Indeterminate" />
                        </VisualStateGroup>
                    </VisualStateManager.VisualStateGroups>
                    <Grid>
                        <Path x:Name="CollapsedArrow"
            HorizontalAlignment="Center"
            VerticalAlignment="Center"
            Data="M 0 0 L 0 8 L 4 4 Z">
                            <Path.Fill>
                                <SolidColorBrush Color="{DynamicResource GlyphColor}" />
                            </Path.Fill>
                        </Path>
                        <Path x:Name="ExpandededArrow"
            HorizontalAlignment="Center"
            VerticalAlignment="Center"
            Visibility="Collapsed"
            Data="M 0 8 L 8 8 L 8 0 Z">
                            <Path.Fill>
                                <SolidColorBrush Color="{DynamicResource GlyphColor}" />
                            </Path.Fill>
                        </Path>
                    </Grid>
                </Border>
            </ControlTemplate>

            <!--Style for Expander-->
            <Style TargetType="Syncfusion:ExpanderExt">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Expander}">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition x:Name="ContentRow"
                           Height="0" />
                                </Grid.RowDefinitions>
                                <VisualStateManager.VisualStateGroups>
                                    <VisualStateGroup x:Name="CommonStates">
                                        <VisualState x:Name="Normal" />
                                        <VisualState x:Name="MouseOver" />
                                        <VisualState x:Name="Disabled">
                                            <Storyboard>
                                                <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                Storyboard.TargetProperty="(Panel.Background).
                      (GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                                    <EasingColorKeyFrame KeyTime="0"
                                         Value="{StaticResource DisabledControlDarkColor}" />
                                                </ColorAnimationUsingKeyFrames>
                                                <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                Storyboard.TargetProperty="(Border.BorderBrush).
                      (GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                                    <EasingColorKeyFrame KeyTime="0"
                                         Value="{StaticResource DisabledBorderLightColor}" />
                                                </ColorAnimationUsingKeyFrames>
                                            </Storyboard>
                                        </VisualState>
                                    </VisualStateGroup>
                                </VisualStateManager.VisualStateGroups>
                                <Border x:Name="Border"
                  Grid.Row="0"
                  BorderThickness="1"
                  CornerRadius="2,2,0,0">
                                    <Border.BorderBrush>
                                        <LinearGradientBrush EndPoint="0,1"
                                   StartPoint="0,0">
                                            <GradientStop Color="{DynamicResource BorderLightColor}"
                              Offset="0" />
                                            <GradientStop Color="{DynamicResource BorderDarkColor}"
                              Offset="1" />
                                        </LinearGradientBrush>

                                    </Border.BorderBrush>
                                    <Border.Background>

                                        <LinearGradientBrush StartPoint="0,0"
                                   EndPoint="0,1">
                                            <LinearGradientBrush.GradientStops>
                                                <GradientStopCollection>
                                                    <GradientStop Color="{DynamicResource ControlLightColor}"
                                  Offset="0.0" />
                                                    <GradientStop Color="{DynamicResource ControlMediumColor}"
                                  Offset="1.0" />
                                                </GradientStopCollection>
                                            </LinearGradientBrush.GradientStops>
                                        </LinearGradientBrush>

                                    </Border.Background>
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="20" />
                                            <ColumnDefinition Width="*" />
                                        </Grid.ColumnDefinitions>
                                        <ToggleButton OverridesDefaultStyle="True"
                            Template="{StaticResource ExpanderToggleButton}"
                            IsChecked="{Binding IsExpanded, Mode=TwoWay, 
                  RelativeSource={RelativeSource TemplatedParent}}">
                                            <ToggleButton.Background>
                                                <LinearGradientBrush EndPoint="0.5,1"
                                       StartPoint="0.5,0">
                                                    <GradientStop Color="{DynamicResource ControlLightColor}"
                                  Offset="0" />
                                                    <GradientStop Color="{DynamicResource ControlMediumColor}"
                                  Offset="1" />
                                                </LinearGradientBrush>
                                            </ToggleButton.Background>
                                        </ToggleButton>
                                        <ContentPresenter Grid.Column="1"
                                Margin="4"
                                ContentSource="Header"
                                RecognizesAccessKey="True" />
                                    </Grid>
                                </Border>
                                <Border x:Name="Content"
                  Grid.Row="1"
                  BorderThickness="1,0,1,1"
                  CornerRadius="0,0,2,2">
                                    <Border.BorderBrush>
                                        <SolidColorBrush Color="{DynamicResource BorderMediumColor}" />
                                    </Border.BorderBrush>
                                    <Border.Background>
                                        <SolidColorBrush Color="{DynamicResource ContentAreaColorDark}" />
                                    </Border.Background>
                                    <ContentPresenter Margin="4" />
                                </Border>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsExpanded"
                   Value="True">
                                    <Setter TargetName="ContentRow"
                    Property="Height"
                    Value="{Binding Height, ElementName=Content}" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="Height" Value="Auto"/>
                <Setter Property="Width" Value="Auto"/>
                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                <Setter Property="BorderThickness" Value="0"/>
            </Style>
            
        </ResourceDictionary>
    </Window.Resources>

    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="1.3*"/>
            <ColumnDefinition Width="9*"/>
            <ColumnDefinition Width="3.5*"/>
        </Grid.ColumnDefinitions>

        <Grid Background="White">
            <Grid.RowDefinitions>
                <RowDefinition Height="35"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>
            <TextBlock Text="Shapes" 
                       FontSize="17" 
                       FontWeight="SemiBold" 
                       Foreground="#2b579a" 
                       HorizontalAlignment="Left" 
                       Margin="10,5,0,5" 
                       Grid.Row="0"/>
            <Stencil:Stencil x:Name="stencil" 
                             Grid.Column="0" 
                             Grid.Row="1" 
                             ExpandMode="ZeroOrMore" 
                             BorderBrush="#dfdfdf"
                             BorderThickness="0,0,1,0">
                <Stencil:Stencil.SymbolSource>
                    <ViewModel:SymbolCollection>
                        <!--BasicShapes-->
                        <Syncfusion:NodeViewModel UnitHeight="60" UnitWidth="60" Shape="{StaticResource Rectangle}" Key="Basic Shapes">
                            <Syncfusion:NodeViewModel.Annotations>
                                <Syncfusion:AnnotationCollection>
                                    <Syncfusion:AnnotationEditorViewModel Content="Annotation" Constraints="Draggable,Editable,Rotatable,Selectable,Resizable"/>
                                </Syncfusion:AnnotationCollection>
                            </Syncfusion:NodeViewModel.Annotations>
                        </Syncfusion:NodeViewModel>
                        <Syncfusion:NodeViewModel UnitHeight="60" UnitWidth="60" Shape="{StaticResource Ellipse}" Key="Basic Shapes"/>
                        <Syncfusion:NodeViewModel UnitHeight="60" UnitWidth="60" Shape="{StaticResource Triangle}" Key="Basic Shapes"/>
                        <Syncfusion:NodeViewModel UnitHeight="60" UnitWidth="60" Shape="{StaticResource Plus}" Key="Basic Shapes"/>
                        <Syncfusion:NodeViewModel UnitHeight="60" UnitWidth="60" Shape="{StaticResource Star}" Key="Basic Shapes"/>
                        <Syncfusion:NodeViewModel UnitHeight="60" UnitWidth="60" Shape="{StaticResource Pentagon}" Key="Basic Shapes"/>
                        <Syncfusion:NodeViewModel UnitHeight="60" UnitWidth="60" Shape="{StaticResource Heptagon}" Key="Basic Shapes"/>
                        <Syncfusion:NodeViewModel UnitHeight="60" UnitWidth="60" Shape="{StaticResource Octagon}" Key="Basic Shapes"/>
                        <Syncfusion:NodeViewModel UnitHeight="60" UnitWidth="60" Shape="{StaticResource Trapezoid}" Key="Basic Shapes"/>
                        <Syncfusion:NodeViewModel UnitHeight="60" UnitWidth="60" Shape="{StaticResource Decagon}" Key="Basic Shapes"/>
                        <Syncfusion:NodeViewModel UnitHeight="60" UnitWidth="60" Shape="{StaticResource RightTriangle}" Key="Basic Shapes"/>
                        <Syncfusion:NodeViewModel UnitHeight="60" UnitWidth="60" Shape="{StaticResource Cylinder}" Key="Basic Shapes"/>
                        <Syncfusion:NodeViewModel UnitHeight="60" UnitWidth="60" Shape="{StaticResource Diamond}" Key="Basic Shapes"/>

                        <Syncfusion:ConnectorViewModel SourcePoint="0,0" TargetPoint="60,60" Key="Connectors" />
                        <Syncfusion:ConnectorViewModel SourcePoint="0,0" TargetPoint="60,60" Key="Connectors">
                            <Syncfusion:ConnectorViewModel.Segments>
                                <Syncfusion:ConnectorSegments>
                                    <Syncfusion:StraightSegment></Syncfusion:StraightSegment>
                                </Syncfusion:ConnectorSegments>
                            </Syncfusion:ConnectorViewModel.Segments>
                        </Syncfusion:ConnectorViewModel>
                        <Syncfusion:ConnectorViewModel SourcePoint="0,0" TargetPoint="60,60" Key="Connectors">
                            <Syncfusion:ConnectorViewModel.Segments>
                                <Syncfusion:ConnectorSegments>
                                    <Syncfusion:CubicCurveSegment></Syncfusion:CubicCurveSegment>
                                </Syncfusion:ConnectorSegments>
                            </Syncfusion:ConnectorViewModel.Segments>
                        </Syncfusion:ConnectorViewModel>
                        <Syncfusion:ConnectorViewModel SourcePoint="0,0" TargetPoint="60,60" Key="Connectors">
                            <Syncfusion:ConnectorViewModel.Segments>
                                <Syncfusion:ConnectorSegments>
                                    <Syncfusion:QuadraticCurveSegment></Syncfusion:QuadraticCurveSegment>
                                </Syncfusion:ConnectorSegments>
                            </Syncfusion:ConnectorViewModel.Segments>
                        </Syncfusion:ConnectorViewModel>
                    </ViewModel:SymbolCollection>
                </Stencil:Stencil.SymbolSource>
                <Stencil:Stencil.SymbolGroups>
                    <Stencil:SymbolGroups>
                        <!--Separate groups based on the key-->
                        <Stencil:SymbolGroupProvider MappingName="Key"/>
                    </Stencil:SymbolGroups>
                </Stencil:Stencil.SymbolGroups>
            </Stencil:Stencil>
        </Grid>

        <!--Initializes Diagram-->
        <Syncfusion:SfDiagram x:Name="diagram" 
                              Grid.Column="1"
                              Nodes="{Binding Nodes}"
                              Connectors="{Binding Connectors}"
                              PageSettings="{Binding PageSettings}"
                              SnapSettings="{Binding SnapSettings}"
                              HorizontalRuler="{Binding HorizontalRuler}"
                              VerticalRuler="{Binding VerticalRuler}"
                              AnnotationChangedCommand="{Binding AnnotationChangedCommand}"
                              AutoScrolledCommand="{Binding AutoScrolledCommand}"
                              ConnectorEditingCommand="{Binding ConnectorEditingCommand}"
                              ConnectorSourceChangedCommand="{Binding ConnectorSourceChangedCommand}"
                              ConnectorTargetChangedCommand="{Binding ConnectorTargetChangedCommand}"
                              DragEnterCommand="{Binding DragEnterCommand}"
                              DragLeaveCommand="{Binding DragLeaveCommand}"
                              DragOverCommand="{Binding DragOverCommand}"
                              DropCommand="{Binding DropCommand}"
                              ItemAddedCommand="{Binding ItemAddedCommand}"
                              ItemDeletedCommand="{Binding ItemDeletedCommand}"
                              ItemDoubleTappedCommand="{Binding ItemDoubleTappedCommand}"
                              ItemSelectedCommand="{Binding ItemSelectedCommand}"
                              ItemTappedCommand="{Binding ItemTappedCommand}"
                              ItemUnSelectedCommand="{Binding ItemUnSelectedCommand}"
                              MenuItemClickedCommand="{Binding MenuItemClickedCommand}"
                              MenuOpeningCommand="{Binding MenuOpeningCommand}"
                              MouseDownCommand="{Binding MouseDownCommand}"
                              MouseUpCommand="{Binding MouseUpCommand}"
                              NodeChangedCommand="{Binding NodeChangedCommand}"
                              SelectedItems="{Binding SelectedItems}">
        </Syncfusion:SfDiagram>
        
        <!--Event CheckBoxes and Log-->
        <Border  Grid.Column="2" Grid.Row="2" Margin="10,0,0,0" Background="#F4F4F4">
            <TabControl Background="#F4F4F4">
                <TabItem Header="Log" Width="100" Height="25">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="50"/>
                        </Grid.RowDefinitions>
                        <TextBox Grid.Row="0" Text="{Binding Events,Mode=TwoWay}" x:Name="EventsTextBox" Margin="15,15,15,15" Width="Auto" ScrollViewer.VerticalScrollBarVisibility="Auto" ScrollViewer.CanContentScroll="True"/>
                        <Button Grid.Row="1" Command="{Binding Clear}" Name="ClearButton" Content="Clear" Margin="0,5,0,0" Height="30" Width="60" CommandParameter="{Binding ElementName=EventsTextBox}"/>
                    </Grid>
                </TabItem>
                <TabItem Header="Events" Width="100" Height="25">
                    <ScrollViewer Height="Auto" Background="White" Margin="15,15,0,15">
                        <StackPanel Background="White">
                            <Grid >
                                <StackPanel Grid.Row="0">
                                    <Syncfusion:ExpanderExt IsExpanded="True">
                                        <Syncfusion:ExpanderExt.Header>
                                            <CheckBox Content="NodeChangedEvent" VerticalContentAlignment="Center" IsChecked="{Binding NodeChanged,Mode=TwoWay}" FontSize="14"/>
                                        </Syncfusion:ExpanderExt.Header>
                                        <StackPanel Margin="40,-10,0,0">
                                            <CheckBox Content="Started" IsChecked="{Binding NodeStarted , Mode=TwoWay}" Margin="0,10,0,0" VerticalContentAlignment="Center"/>
                                            <CheckBox Content="Resizing" IsChecked="{Binding NodeResizing , Mode=TwoWay}" Margin="0,10,0,0" VerticalContentAlignment="Center"/>
                                            <CheckBox Content="Resized" IsChecked="{Binding NodeResized , Mode=TwoWay}" Margin="0,10,0,0" VerticalContentAlignment="Center"/>
                                            <CheckBox Content="Rotating" IsChecked="{Binding NodeRotating ,Mode=TwoWay}" Margin="0,10,0,0" VerticalContentAlignment="Center"/>
                                            <CheckBox Content="Rotated" IsChecked="{Binding NodeRotated , Mode=TwoWay}" Margin="0,10,0,0" VerticalContentAlignment="Center"/>
                                            <CheckBox Content="Dragging" IsChecked="{Binding NodeDragging , Mode=TwoWay}" Margin="0,10,0,0" VerticalContentAlignment="Center"/>
                                            <CheckBox Content="Dragged" IsChecked="{Binding NodeDragged , Mode=TwoWay}" Margin="0,10,0,0" VerticalContentAlignment="Center"/>
                                        </StackPanel>
                                    </Syncfusion:ExpanderExt>
                                    <Syncfusion:ExpanderExt Margin="0,10,0,0" IsExpanded="True">
                                        <Syncfusion:ExpanderExt.Header>
                                            <CheckBox Content="ConnectorEditingEvent" VerticalContentAlignment="Center" IsChecked="{Binding ConnectorEditing,Mode=TwoWay}" FontSize="14"/>
                                        </Syncfusion:ExpanderExt.Header>
                                        <StackPanel Margin="40,-10,0,0">
                                            <CheckBox Content="ConnectorEditStarting" IsChecked="{Binding ConnectorEditStarting,Mode=TwoWay}" Margin="0,10,0,0" VerticalContentAlignment="Center"/>
                                            <CheckBox Content="ConnectorEditStarted" IsChecked="{Binding ConnectorEditStarted,Mode=TwoWay}" Margin="0,10,0,0" VerticalContentAlignment="Center"/>
                                            <CheckBox Content="ConnectorEditDragging" IsChecked="{Binding ConnectorEditDragging,Mode=TwoWay}" Margin="0,10,0,0" VerticalContentAlignment="Center"/>
                                            <CheckBox Content="ConnectorEditCompleted" IsChecked="{Binding ConnectorEditCompleted,Mode=TwoWay}" Margin="0,10,0,0" VerticalContentAlignment="Center"/>
                                        </StackPanel>
                                    </Syncfusion:ExpanderExt>
                                    <Syncfusion:ExpanderExt Margin="0,10,0,0" IsExpanded="True">
                                        <Syncfusion:ExpanderExt.Header>
                                            <CheckBox Content="ConnectorSourceChangedEvent" VerticalContentAlignment="Center" IsChecked="{Binding ConnectorSourceChanged,Mode=TwoWay}" FontSize="14"/>
                                        </Syncfusion:ExpanderExt.Header>
                                        <StackPanel Margin="40,-10,0,0">
                                            <CheckBox Content="ConnectorSourceStarting" IsChecked="{Binding ConnectorSourceStarting,Mode=TwoWay}" Margin="0,10,0,0" VerticalContentAlignment="Center"/>
                                            <CheckBox Content="ConnectorSourceStarted" IsChecked="{Binding ConnectorSourceStarted,Mode=TwoWay}" Margin="0,10,0,0" VerticalContentAlignment="Center"/>
                                            <CheckBox Content="ConnectorSourceDragging" IsChecked="{Binding ConnectorSourceDragging,Mode=TwoWay}" Margin="0,10,0,0" VerticalContentAlignment="Center"/>
                                            <CheckBox Content="ConnectorSourceCompleted" IsChecked="{Binding ConnectorSourceCompleted,Mode=TwoWay}" Margin="0,10,0,0" VerticalContentAlignment="Center"/>
                                        </StackPanel>
                                    </Syncfusion:ExpanderExt>
                                    <Syncfusion:ExpanderExt Margin="0,10,0,0" IsExpanded="True">
                                        <Syncfusion:ExpanderExt.Header>
                                            <CheckBox Content="ConnectorTargetChangedEvent" VerticalContentAlignment="Center" IsChecked="{Binding ConnectorTargetChanged,Mode=TwoWay}" FontSize="14"/>
                                        </Syncfusion:ExpanderExt.Header>
                                        <StackPanel Margin="40,-10,0,0">
                                            <CheckBox Content="ConnectorTargetStarting" IsChecked="{Binding ConnectorTargetStarting,Mode=TwoWay}" Margin="0,10,0,0" VerticalContentAlignment="Center"/>
                                            <CheckBox Content="ConnectorTargetStarted" IsChecked="{Binding ConnectorTargetStarted,Mode=TwoWay}" Margin="0,10,0,0" VerticalContentAlignment="Center"/>
                                            <CheckBox Content="ConnectorTargetDragging" IsChecked="{Binding ConnectorTargetDragging,Mode=TwoWay}" Margin="0,10,0,0" VerticalContentAlignment="Center"/>
                                            <CheckBox Content="ConnectorTargetCompleted" IsChecked="{Binding ConnectorTargetCompleted,Mode=TwoWay}" Margin="0,10,0,0" VerticalContentAlignment="Center"/>
                                        </StackPanel>
                                    </Syncfusion:ExpanderExt>
                                    <Syncfusion:ExpanderExt Margin="0,10,0,0" IsExpanded="True">
                                        <Syncfusion:ExpanderExt.Header>
                                            <CheckBox Content="AnnotationChangedEvent" VerticalContentAlignment="Center" IsChecked="{Binding AnnotationChanged,Mode=TwoWay}" FontSize="14"/>
                                        </Syncfusion:ExpanderExt.Header>
                                        <StackPanel Margin="40,-10,0,0">
                                            <CheckBox Content="Editing" IsChecked="{Binding AnnotationEditing , Mode=TwoWay}" Margin="0,10,0,0" VerticalContentAlignment="Center"/>
                                            <CheckBox Content="Edited" IsChecked="{Binding AnnotationEdited , Mode=TwoWay}" Margin="0,10,0,0" VerticalContentAlignment="Center"/>
                                            <CheckBox Content="Resizing" IsChecked="{Binding AnnotationResizing , Mode=TwoWay}" Margin="0,10,0,0" VerticalContentAlignment="Center"/>
                                            <CheckBox Content="Resized" IsChecked="{Binding AnnotationResized , Mode=TwoWay}" Margin="0,10,0,0" VerticalContentAlignment="Center"/>
                                            <CheckBox Content="Rotating" IsChecked="{Binding AnnotationRotating ,Mode=TwoWay}" Margin="0,10,0,0" VerticalContentAlignment="Center"/>
                                            <CheckBox Content="Rotated" IsChecked="{Binding AnnotationRotated , Mode=TwoWay}" Margin="0,10,0,0" VerticalContentAlignment="Center"/>
                                            <CheckBox Content="Dragging" IsChecked="{Binding AnnotationDragging , Mode=TwoWay}" Margin="0,10,0,0" VerticalContentAlignment="Center"/>
                                            <CheckBox Content="Dragged" IsChecked="{Binding AnnotationDragged , Mode=TwoWay}" Margin="0,10,0,0" VerticalContentAlignment="Center"/>
                                        </StackPanel>
                                    </Syncfusion:ExpanderExt>
                                    <CheckBox Content="ItemAddedEvent" FontWeight="Bold" VerticalContentAlignment="Center" IsChecked="{Binding ItemAdded,Mode=TwoWay}" FontSize="14" Margin="25,20,0,0"/>
                                    <CheckBox Content="ItemDeletedEvent" FontWeight="Bold" VerticalContentAlignment="Center" IsChecked="{Binding ItemDeleted,Mode=TwoWay}" FontSize="14" Margin="25,20,0,0"/>                                    
                                    <CheckBox Content="ItemDoubleTappedEvent" FontWeight="Bold" VerticalContentAlignment="Center" IsChecked="{Binding ItemDoubleTapped,Mode=TwoWay}" FontSize="14" Margin="25,20,0,0"/>
                                    <CheckBox Content="ItemSelectedEvent" FontWeight="Bold" VerticalContentAlignment="Center" IsChecked="{Binding ItemSelected,Mode=TwoWay}" FontSize="14" Margin="25,20,0,0"/>                                    
                                    <CheckBox Content="ItemTappedEvent" FontWeight="Bold" VerticalContentAlignment="Center" IsChecked="{Binding ItemTapped,Mode=TwoWay}" FontSize="14" Margin="25,20,0,0"/>
                                    <CheckBox Content="ItemUnSelectedEvent" FontWeight="Bold" VerticalContentAlignment="Center" IsChecked="{Binding ItemUnSelected,Mode=TwoWay}" FontSize="14" Margin="25,20,0,0"/>
                                    <CheckBox Content="DragEnterEvent" FontWeight="Bold" VerticalContentAlignment="Center" IsChecked="{Binding Dragenter,Mode=TwoWay}" FontSize="14" Margin="25,20,0,0"/>
                                    <CheckBox Content="DragOverEvent" FontWeight="Bold" VerticalContentAlignment="Center" IsChecked="{Binding DragOver,Mode=TwoWay}" FontSize="14" Margin="25,20,0,0"/>
                                    <CheckBox Content="DropEvent" FontWeight="Bold" VerticalContentAlignment="Center" IsChecked="{Binding Drop,Mode=TwoWay}" FontSize="14" Margin="25,20,0,0"/>
                                    <CheckBox Content="MenuItemClickedEvent" FontWeight="Bold" VerticalContentAlignment="Center" IsChecked="{Binding MenuItemClicked,Mode=TwoWay}" FontSize="14" Margin="25,20,0,0"/>
                                    <CheckBox Content="MenuOpeningEvent" FontWeight="Bold" VerticalContentAlignment="Center"  IsChecked="{Binding MenuOpening,Mode=TwoWay}" FontSize="14" Margin="25,20,0,0"/>
                                    <CheckBox Content="AutoScrollChangedEvent" FontWeight="Bold" VerticalContentAlignment="Center" IsChecked="{Binding AutoScroll,Mode=TwoWay}" FontSize="14" Margin="25,15,0,0"/>
                                </StackPanel>
                            </Grid>
                        </StackPanel>
                    </ScrollViewer>
                </TabItem>
            </TabControl>
        </Border>
    </Grid>
    
</Window>