#region Copyright Syncfusion Inc. 2001-2020.
// Copyright Syncfusion Inc. 2001-2020. All rights reserved.
// Use of this code is subject to the terms of our license.
// A copy of the current license can be obtained at any time by e-mailing
// licensing@syncfusion.com. Any infringement will be prosecuted under
// applicable laws. 
#endregion
using syncfusion.demoscommon.wpf;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace syncfusion.gridcontroldemos.wpf
{
   public class GridControlDemosViewModel : DemoBrowserViewModel
    {
        public override List<ProductDemo> GetDemosDetails()
        {
            var productdemos = new List<ProductDemo>();
            productdemos.Add(new GridControlProductDemos());
            return productdemos;
        }
    }

    public class GridControlProductDemos : ProductDemo
    {
        public GridControlProductDemos()
        {
            this.Product = "Grid Control";
            this.ProductCategory = "GRIDS";
            this.Demos = new List<DemoInfo>();
            
            this.Demos.Add(new DemoInfo() { SampleName = "Excel Like UI", Description = "This sample showcases the following capabilities of GridControl such as Selection Frame, Floating cells, Formula cells, Markup headers and Tab sheets and it provides us interactive user experience with an Excel-like appearance and characteristics .", GroupName = "PRODUCT SHOWCASE", DemoViewType = typeof(ExcelLikeUI), DemoLauchMode = DemoLauchMode.Window,ThemeMode=ThemeMode.None });
            this.Demos.Add(new DemoInfo() { SampleName = "Scroll Performance", Description = "This sample showcases the scrolling performance of GridControl.", GroupName = "PERFORMANCE", DemoViewType = typeof(ScrollPerformance), ThemeMode = ThemeMode.Default });
            this.Demos.Add(new DemoInfo() { SampleName = "TraderGrid Test", Description = "This sample showcases the real time updates capability of GridControl.It provides support to insert and remove rows or columns with a minimal CPU usage. It also handles very high frequency updates and refresh scenarios.", GroupName = "PERFORMANCE", DemoViewType = typeof(TraderGridTest), ThemeMode = ThemeMode.Default });
            this.Demos.Add(new DemoInfo() { SampleName = "Excel Like Drag and Drop", Description = "This sample showcases Excel like Drag and Drop in GridControl. This feature enables you to select any range and click on any corner of the selected region to drag it and drop it anywhere into a Grid, or some other controls, in an application. You can enable this feature by setting the AllowDragDrop property of the GridControl as True.", GroupName = "EXCEL LIKE FEATURES", DemoViewType = typeof(ExcelLikeDragandDrop), ThemeMode = ThemeMode.Default });
            this.Demos.Add(new DemoInfo() { SampleName = "Excel Like Fill Selection", Description = "This sample showcases Excel-like Fill selection in GridControl. This allows you to fill the data of selected cells by clicking and dragging the bottom right corner of the selected region. A popup button is displayed below the cell containing various options to customize how the data is to be filled in the dragged cells.", GroupName = "EXCEL LIKE FEATURES", DemoViewType = typeof(ExcelLikeFillSelection), ThemeMode = ThemeMode.Default });
            this.Demos.Add(new DemoInfo() { SampleName = "Floating Cells", Description = "This sample showcases the following capability of GridControl such as to display the cell content in an adjacent cell by overlapping the next cell, when the cell content exceeds the cell width. GridControl supports this floating behavior in both display and edit mode.", GroupName = "EXCEL LIKE FEATURES", DemoViewType = typeof(FloatingCells), ThemeMode = ThemeMode.Default });
            this.Demos.Add(new DemoInfo() { SampleName = "Freeze Pane", Description = "This sample of GridControl showcases the Freeze Pane feature . This enables you to freeze a part of the grid on screen, so that you can see the frozen area, even when you scroll through the other part independently. The Freeze Pane feature is frequently used to keep a set of title cells in view as data scrolls through or next to it.", GroupName = "EXCEL LIKE FEATURES", DemoViewType = typeof(FreezePane), ThemeMode = ThemeMode.Default });
            this.Demos.Add(new DemoInfo() { SampleName = "Hidden Row Column Resizing", Description = "This sample showcases the following capabilities of GridControl such as to resize and an option to hide and unhide the specified number of rows and columns. GridControl allows you to resize, hide and unhide the rows or columns by dragging the resizing cursor that appears when the mouse is hovered at the edge of the Header cells.", GroupName = "EXCEL LIKE FEATURES", DemoViewType = typeof(HiddenRowColumnResizing), ThemeMode = ThemeMode.Default });
            this.Demos.Add(new DemoInfo() { SampleName = "Input Message", Description = "This sample showcases Excel-like Input tips in the GridControl, that is, GridControl displays a small pop-up that contains the custom message about a cell when that particular cell is selected.", GroupName = "EXCEL LIKE FEATURES", DemoViewType = typeof(InputMessage), ThemeMode = ThemeMode.Default });
            this.Demos.Add(new DemoInfo() { SampleName = "Selection Marker", Description = "This sample showcases a support for selection marker in GridControl, which shows the marker on the selection rectangle when the selection covers the hidden ranges.", GroupName = "EXCEL LIKE FEATURES", DemoViewType = typeof(SelectionMarker), ThemeMode = ThemeMode.Default });
            this.Demos.Add(new DemoInfo() { SampleName = "Sort Column", Description = "This sample showcases the sorting of a column in a GridControl. Sorting can be easily accomplished by clicking on the appropriate columnâ€™s header cell.", GroupName = "EXCEL LIKE FEATURES", DemoViewType = typeof(SortColumn), ThemeMode = ThemeMode.Default });
            this.Demos.Add(new DemoInfo() { SampleName = "Undo Redo", Description = "This sample showcases how to perform Undo and Redo operations in GridControl. Undo reverts the actions that are performed in GridControl and Redo reverts the undo actions.", GroupName = "EXCEL LIKE FEATURES", DemoViewType = typeof(UndoRedo), ThemeMode = ThemeMode.Default });
            this.Demos.Add(new DemoInfo() { SampleName = "Virtual Cell", Description = "This sample showcases a Virtual Cell architecture in GridControl where the cell contents are drawn statically until a live cell is needed. ", GroupName = "GRID VIRTUALIZATION", DemoViewType = typeof(VirtualCell), ThemeMode = ThemeMode.Default });
            this.Demos.Add(new DemoInfo() { SampleName = "Virtual Grid", Description = "This sample showcases the virtualization support in GridControl that allows you to display large data sources very quickly. The data is provided to the GridControl on demand through an event that allows you to furnish the requested data in the handler. You can also instantaneously hide or show millions of rows in a GridControl.", GroupName = "GRID VIRTUALIZATION", DemoViewType = typeof(VirtualGrid), ThemeMode = ThemeMode.Default });
            this.Demos.Add(new DemoInfo() { SampleName = "Advanced DataTemplate Cell", Description = "This sample of GridControl showcases how to load the DataTemplate into a cell. By using a DataTemplate, each cell can be customized by defining the template. In this application, some advanced controls like DataGrid, Charts, and Gauge are loaded into a cell in GridControl.", GroupName = "CELL TYPES", DemoViewType = typeof(AdvancedDataTemplateCell), ThemeMode = ThemeMode.Default });
            this.Demos.Add(new DemoInfo() { SampleName = "Basic Cell Type", Description = "This sample showcases the following capabilities of GridControl such as to load different types of cells like TextBox, Static, Header, Checkbox, Button and Image and its contents into any cell.", GroupName = "CELL TYPES", DemoViewType = typeof(BasicCellType), ThemeMode = ThemeMode.Default });
            this.Demos.Add(new DemoInfo() { SampleName = "Combo Box Cell", Description = "This sample showcases the following capabilities of GridControl such as the use of Combo Box, Drop-Down, and Multicolumn Grid list controls in Grid cells. The various options illustrated include AutoComplete functionality, getting items for the drop-down from either a string collection or a LINQ source, and using the drop-down in a foreign-key manner. For example, displaying one column from a data source in the drop-down while saving the cell value from another column in the data source.", GroupName = "CELL TYPES", DemoViewType = typeof(ComboBoxCell), ThemeMode = ThemeMode.Default });
            this.Demos.Add(new DemoInfo() { SampleName = "Currency Cell", Description = "This sample showcases the Currency-Edit cell type that provides edit experience with different currency symbols, number formats, decimal digits, number groups and number group separators, etc.", GroupName = "CELL TYPES", DemoViewType = typeof(CurrencyCell), ThemeMode = ThemeMode.Default });
            this.Demos.Add(new DemoInfo() { SampleName = "Custom Data Template Cell", Description = "This sample of GridControl showcases how to load the DataTemplate into a cell. By using a DataTemplate, each and every cell can be customized with a different look and feel, achieving a colorful appearance for the entire Grid Control.", GroupName = "CELL TYPES", DemoViewType = typeof(CustomDataTemplateCell), ThemeMode = ThemeMode.Default });
            this.Demos.Add(new DemoInfo() { SampleName = "Custom Drop Down", Description = "This sample showcases how to create your own custom cell renderer in GridControl and demonstrates how you can easily create a Custom Drop-Down control and renderer. The Custom Drop-Down Cell Type allow you to implement you to own custom drop-downs. The drop-downs can be easily created by inheriting the GridCellDropDownControlBase and GridCellDropDownCellRenderer base classes.", GroupName = "CELL TYPES", DemoViewType = typeof(CustomDropDown), ThemeMode = ThemeMode.Default });
            this.Demos.Add(new DemoInfo() { SampleName = "Data Template Cell", Description = "This sample showcases how the GridControl provides a support to load the DataTemplate into a cell. By using a DataTemplate, each and every cell can be customized with a different look and feel, achieving a colorful appearance for the entire Grid Control.", GroupName = "CELL TYPES", DemoViewType = typeof(DataTemplateCell), ThemeMode = ThemeMode.Default });
            this.Demos.Add(new DemoInfo() { SampleName = "Date Time Cell", Description = "This sample showcases the DateTime cell type that provides edit experience with attractive DateTimePicker to modify the date and time value of the cell in a GridControl.", GroupName = "CELL TYPES", DemoViewType = typeof(DateTimeCell), ThemeMode = ThemeMode.Default });
            this.Demos.Add(new DemoInfo() { SampleName = "Double Edit Cell", Description = "This sample showcases the Double-Edit cell type that provides edit experience with different number formats, decimal digits, number groups and number group separators, etc.", GroupName = "CELL TYPES", DemoViewType = typeof(DoubleEditCell), ThemeMode = ThemeMode.Default });
            this.Demos.Add(new DemoInfo() { SampleName = "Gauge Chart", Description = "This sample showcases how the Gauge and various Charts are loaded into a cell in GridControl. By using a DataTemplate, each cell can be customized by defining the template.", GroupName = "CELL TYPES", DemoViewType = typeof(GaugeChart), ThemeMode = ThemeMode.Default });
            this.Demos.Add(new DemoInfo() { SampleName = "Integer Edit Cell", Description = "This sample showcases the Integer-Edit cell type that provides edit experience with different number formats, number groups and number group separators, etc.", GroupName = "CELL TYPES", DemoViewType = typeof(IntegerEditCell), ThemeMode = ThemeMode.Default });
            this.Demos.Add(new DemoInfo() { SampleName = "Mask Edit Cell", Description = "This sample showcases the Mask-Edit cell type that provides edit experience with different prompt characters, number formats, date formats, time formats, number decimal separators and number group separators, etc.", GroupName = "CELL TYPES", DemoViewType = typeof(MaskEditCell), ThemeMode = ThemeMode.Default });
            this.Demos.Add(new DemoInfo() { SampleName = "Nested Grid", Description = "This sample of GridControl showcases how to display nested tables in grid cells. By setting the CellType, a grid is loaded into a cell as NestedGrid.", GroupName = "CELL TYPES", DemoViewType = typeof(NestedGrid), ThemeMode = ThemeMode.Default });
            this.Demos.Add(new DemoInfo() { SampleName = "Percent Edit Cell", Description = "This sample showcases the Percent-Edit cell type, that provides edit experience with percent symbols, decimal digits, number groups and number group separators, etc.", GroupName = "CELL TYPES", DemoViewType = typeof(PercentEditCell), ThemeMode = ThemeMode.Default });
            this.Demos.Add(new DemoInfo() { SampleName = "RichTextBox Cell", Description = "This sample showcases the RichTextBox cell type, that provides you with a rich edit experience. It provides the support to load the RichTextBox into a cell by setting the CellType.", GroupName = "CELL TYPES", DemoViewType = typeof(RichTextBoxCell), ThemeMode = ThemeMode.Default });
            this.Demos.Add(new DemoInfo() { SampleName = "Text Image Cell", Description = "This sample of GridControl showcases how to load the images into a cell along with the text. That is, the GridControl displays both Image and text in a cell.", GroupName = "CELL TYPES", DemoViewType = typeof(TextImageCell), ThemeMode = ThemeMode.Default });
            this.Demos.Add(new DemoInfo() { SampleName = "Up Down Cell", Description = "This sample showcases the UpDown cell type, that provides you with an edit experience with decimal digits, number groups and number group separators, etc., along with a spin button that helps to increase or decrease the value by simply pressing it.", GroupName = "CELL TYPES", DemoViewType = typeof(UpDownCell), ThemeMode = ThemeMode.Default });
            this.Demos.Add(new DemoInfo() { SampleName = "Cell Style", Description = "This sample of GridControl showcases how to customize the appearance of each and every cell with different styles such as background, foreground, font size, font family, font styles, text orientation, and text alignment, etc.", GroupName = "APPEARANCE", DemoViewType = typeof(CellStyle), ThemeMode = ThemeMode.Default });
            this.Demos.Add(new DemoInfo() { SampleName = "Comment Service", Description = "This sample of GridControl showcases how to show comments in a cell as a small triangle at corners of the cell and display content via popup when mouse hover the small triangle. Comments are used to provide context to data in cells. Text in comments can be richly formatted to emphasize a comment concerning the cell.", GroupName = "APPEARANCE", DemoViewType = typeof(CommentService), ThemeMode = ThemeMode.Default });
            this.Demos.Add(new DemoInfo() { SampleName = "Covered Cell ", Description = "This sample of GridControl showcases how to combine the cells in adjacent rows or columns or both. Covered Cells are cells that span over neighboring cells. The combined cells act as like they are a single cell, visually and programmatically.", GroupName = "APPEARANCE", DemoViewType = typeof(CoveredCell), ThemeMode = ThemeMode.Default });
            this.Demos.Add(new DemoInfo() { SampleName = "GridStyleInfo At Work", Description = "This sample showcases the following capabilities of GridControl such as the relationship between a Standard Style, Table Style, Base Style, Row Style, Column Style, and Cell Style. It lets you customize each style and allows you to choose whether you want to include the style or not.", GroupName = "APPEARANCE", DemoViewType = typeof(GridStyleInfoAtWork), ThemeMode = ThemeMode.Default });
            this.Demos.Add(new DemoInfo() { SampleName = "Grid Properties", Description = "This sample showcases the following capabilities of GridControl such as how to hide the headers, gridlines and how to set the styles using QueryBaseStyles and selection behaviour like ListBoxMode Selection of grid.", GroupName = "APPEARANCE", DemoViewType = typeof(GridProperties), ThemeMode = ThemeMode.Default });
            this.Demos.Add(new DemoInfo() { SampleName = "Text Format", Description = "The sample showcases the following capabilities in GridControl such as number formatting, date-time formatting, and validating data when leaving the cell from edit mode.", GroupName = "APPEARANCE", DemoViewType = typeof(TextFormat), ThemeMode = ThemeMode.Default });
            this.Demos.Add(new DemoInfo() { SampleName = "Tooltip", Description = "This sample of GridControl showcases how to associate the individual cells with ToolTip. ToolTip is a small pop-up box that appears when you move the mouse over a cell. It is used to display additional information about the cell. They are mainly used to display some text data. You can also display a text block with an image in the tooltip.", GroupName = "APPEARANCE", DemoViewType = typeof(Tooltip), ThemeMode = ThemeMode.Default });
            this.Demos.Add(new DemoInfo() { SampleName = "Formula Range Selection", Description = "This sample showcases a helper class that enables you to use your mouse to insert range references as you enter a formula from the keyboard.", GroupName = "FORMULA SUPPORT", DemoViewType = typeof(FormulaRangeSelection), ThemeMode = ThemeMode.Default });
            this.Demos.Add(new DemoInfo() { SampleName = "Formula Test Values", Description = "This sample showcases the following capability of GridControl such as how the values of a formula entered during runtime can be computed by using the formula engine. Currently, there are 370 functions that are supported by the formula engine, covering all common usage scenarios like Excel. GridControl provides support to create and use custom functions also.", GroupName = "FORMULA SUPPORT", DemoViewType = typeof(FormulaTestValues), ThemeMode = ThemeMode.Default });
            this.Demos.Add(new DemoInfo() { SampleName = "Copy To Clipboard", Description = "This sample showcases the following capabilities of GridControl such as Clipboard Operations like Cut, Copy and Paste and also provides you with options to customize the behavior of the clipboard operations. This sample showcases the clipboard support within a GridControl and other applications by specifying the different CopyPaste options.", GroupName = "SELECTIONS", DemoViewType = typeof(CopyToClipboard), ThemeMode = ThemeMode.Default });
            this.Demos.Add(new DemoInfo() { SampleName = "Excel Like Selection", Description = "This sample showcases the following capabilities of GridControl such as, Excel-like Selection frame, Excel-like current cell moving when extending the selection using mouse and extending the selection by pressing Shift key, etc.", GroupName = "SELECTIONS", DemoViewType = typeof(ExcelLikeSelection),ThemeMode = ThemeMode.Default });
            this.Demos.Add(new DemoInfo() { SampleName = "Grid Control Selection", Description = "This sample showcases the various selection options in GridControl. That is single cell selection, ListBox selection, row selection and column selection. It also provides various event handlers to customize the behavior of the selection.", GroupName = "SELECTIONS", DemoViewType = typeof(GridControlSelection), ThemeMode = ThemeMode.Default });
            this.Demos.Add(new DemoInfo() { SampleName = "Border Padding CellS", Description = "GridControl provides support to customize the cell borders and its padding. This sample showcases the various types of border styles and border padding. Based on border padding thickness, the padding of text in a cell can also be adjusted. GridControl allows you to customize the border in each and every side of the cell.", GroupName = "GRID LAYOUT", DemoViewType = typeof(BorderPaddingCell), ThemeMode = ThemeMode.Default });
            this.Demos.Add(new DemoInfo() { SampleName = "Drag and Drop", Description = "This sample showcases how to drag and drop columns around the grid. An animated indicator denotes the place of the drop when dragging the column. It provides an event handler to customize the behavior of drag and drop.", GroupName = "GRID LAYOUT", DemoViewType = typeof(DragandDrop), ThemeMode = ThemeMode.Default });
            this.Demos.Add(new DemoInfo() { SampleName = "Hide or Show Column", Description = "This sample showcases to show or hide the set of rows and columns in GridControl.", GroupName = "GRID LAYOUT", DemoViewType = typeof(HideorShowColumn), ThemeMode = ThemeMode.Default });
            this.Demos.Add(new DemoInfo() { SampleName = "Resize To Fit", Description = "This sample showcases the following capability of GridControl such as to automatically customize the height or width of the row or column, based on the content loaded into the cell. And provides the various options to customize the Auto fit behavior.", GroupName = "GRID LAYOUT", DemoViewType = typeof(ResizeToFit), ThemeMode = ThemeMode.Default });
            this.Demos.Add(new DemoInfo() { SampleName = "Excel Import", Description = "This sample showcases the Excel Importing feature in GridControl. This Excel Importing feature allows you to import the Excel Workbook to the GridControl with the same set of features, like style, Formula, Named Ranges, Conditional Formatting, Data Validation, Freezing Pane and Bookmarks, etc.", GroupName = "IMPORT", DemoViewType = typeof(ExcelImport), DemoLauchMode = DemoLauchMode.Window, ThemeMode = ThemeMode.None });
            this.Demos.Add(new DemoInfo() { SampleName = "CSV Export", Description = "This sample showcases how to export the content of an entire Grid or the contents of the specified range of cells into the csv format. And it provides various event handlers to customize the behavior of exporting.", GroupName = "EXPORT", DemoViewType = typeof(CSVExport), ThemeMode = ThemeMode.Default });
            this.Demos.Add(new DemoInfo() { SampleName = "Excel Export", Description = "This sample showcases how to export the content of the entire Grid or the content of the specified range of cells into the excel format. And it provides various event handlers to customize the behavior of exporting.", GroupName = "EXPORT", DemoViewType = typeof(ExcelExport), ThemeMode = ThemeMode.Default });
            this.Demos.Add(new DemoInfo() { SampleName = "Pdf Export", Description = "This sample showcases how to export the content of the entire Grid or the content of the specified range of cells into the pdf format. And it provides various event handlers to customize the behavior of exporting like adding header and footer.", GroupName = "EXPORT", DemoViewType = typeof(PdfExport), ThemeMode = ThemeMode.Default });
            this.Demos.Add(new DemoInfo() { SampleName = "Printing", Description = "This sample showcases how to print the content of the entire Grid or the contents of the specified range of cells by providing various options to customize how the content is to be printed. It also provides a familiar Grid Print dialog to preview the printing.", GroupName = "PRINTING", DemoViewType = typeof(Printing), ThemeMode = ThemeMode.Default });
            this.Demos.Add(new DemoInfo() { SampleName = "Deferred Scrolling", Description = "This sample showcases the support for deferred scrolling in GridControl, That is, the Grid remains stationary when you drag the thumb of a scrollBar and updates its view only when you release the thumb of the scrollbar.", GroupName = "SCROLLING", DemoViewType = typeof(DeferredScrolling), ThemeMode = ThemeMode.Default });
            this.Demos.Add(new DemoInfo() { SampleName = "Zooming", Description = "This sample showcases the zooming support in GridControl. User can increase or decrease the zooming level of GridControl using the ZoomScale.", GroupName = "ZOOMING", DemoViewType = typeof(Zooming),ThemeMode = ThemeMode.Default });
            this.Demos.Add(new DemoInfo() { SampleName = "Grid Serialization", Description = "This sample showcases the support for serialization and deserialization in GridControl. GridControl serializes the GridModel into various formats like string, xml and stream, and de-serializes from it.", GroupName = "SERIALIZATION", DemoViewType = typeof(GridSerialization), ThemeMode = ThemeMode.Default });
        }
    }
}


